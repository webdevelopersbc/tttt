// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9mqRAvaqXroYsLL4JDVYSZ
// Component: ZzYrJcV1lZ5V

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Editable from "../../Editable"; // plasmic-import: d8H_3azYHYqG/component
import TextInput from "../../TextInput"; // plasmic-import: DIk36JQhInv1/component
import Offer2 from "../../Offer2"; // plasmic-import: 1UPYifxPFK6Jai/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsqG0QbBk7DXxf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: qG0QBBk7DXxf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_legacy_feed_page_designs_css from "../legacy_feed_page_designs/plasmic_legacy_feed_page_designs.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import projectcss from "./plasmic_copy_of_copy_of_new_datasource_ssg_app_page_generator.module.css"; // plasmic-import: 9mqRAvaqXroYsLL4JDVYSZ/projectcss
import sty from "./PlasmicAdvertorial.module.css"; // plasmic-import: ZzYrJcV1lZ5V/css

createPlasmicElementProxy;

export type PlasmicAdvertorial__VariantMembers = {};
export type PlasmicAdvertorial__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdvertorial__VariantsArgs;
export const PlasmicAdvertorial__VariantProps = new Array<VariantPropType>();

export type PlasmicAdvertorial__ArgsType = {
  slot9?: React.ReactNode;
  pageId?: number;
  editable?: string;
  onEdit?: () => void;
  articleParagraph24?: string;
  onArticleParagraph24Change?: (val: string) => void;
};
type ArgPropType = keyof PlasmicAdvertorial__ArgsType;
export const PlasmicAdvertorial__ArgProps = new Array<ArgPropType>(
  "slot9",
  "pageId",
  "editable",
  "onEdit",
  "articleParagraph24",
  "onArticleParagraph24Change"
);

export type PlasmicAdvertorial__OverridesType = {
  root?: Flex__<"div">;
  nav?: Flex__<"div">;
  columns?: Flex__<"div">;
  logo3?: Flex__<typeof Editable>;
  logo?: Flex__<typeof PlasmicImg__>;
  editLogo?: Flex__<typeof TextInput>;
  slogan?: Flex__<typeof Editable>;
  text110?: Flex__<"div">;
  editText1?: Flex__<typeof TextInput>;
  intro?: Flex__<"div">;
  heroHeadline?: Flex__<typeof Editable>;
  text22?: Flex__<"div">;
  editText2?: Flex__<typeof TextInput>;
  heroSubHeadline2?: Flex__<typeof Editable>;
  heroSubHeadline?: Flex__<"div">;
  editText4?: Flex__<typeof TextInput>;
  cta?: Flex__<"div">;
  cta3?: Flex__<typeof Editable>;
  text32?: Flex__<"div">;
  editText3?: Flex__<typeof TextInput>;
  reviewIcon2?: Flex__<typeof PlasmicImg__>;
  reviewStatement2?: Flex__<"div">;
  body?: Flex__<"div">;
  articleBody?: Flex__<"div">;
  press?: Flex__<"div">;
  pressIcon?: Flex__<typeof PlasmicImg__>;
  imageOne?: Flex__<typeof Editable>;
  image12?: Flex__<typeof PlasmicImg__>;
  editImage1?: Flex__<typeof TextInput>;
  paragraphOne?: Flex__<typeof Editable>;
  text52?: Flex__<"div">;
  editText5?: Flex__<typeof TextInput>;
  h21?: Flex__<"div">;
  imageTwo?: Flex__<typeof Editable>;
  image22?: Flex__<typeof PlasmicImg__>;
  editImage2?: Flex__<typeof TextInput>;
  paragraphTwo?: Flex__<typeof Editable>;
  text62?: Flex__<"div">;
  editText6?: Flex__<typeof TextInput>;
  h22?: Flex__<"div">;
  imageThree?: Flex__<typeof Editable>;
  image32?: Flex__<typeof PlasmicImg__>;
  editImage3?: Flex__<typeof TextInput>;
  paragraphThree?: Flex__<typeof Editable>;
  text72?: Flex__<"div">;
  editText7?: Flex__<typeof TextInput>;
  h23?: Flex__<"div">;
  imageFour?: Flex__<typeof Editable>;
  image42?: Flex__<typeof PlasmicImg__>;
  editImage4?: Flex__<typeof TextInput>;
  paragraphFour?: Flex__<typeof Editable>;
  text82?: Flex__<"div">;
  editText8?: Flex__<typeof TextInput>;
  h24?: Flex__<"div">;
  review1?: Flex__<"div">;
  paragraph42?: Flex__<"div">;
  paragraph43?: Flex__<"div">;
  paragraph44?: Flex__<"div">;
  review2?: Flex__<"div">;
  paragraph45?: Flex__<"div">;
  paragraph46?: Flex__<"div">;
  paragraph47?: Flex__<"div">;
  review3?: Flex__<"div">;
  paragraph48?: Flex__<"div">;
  paragraph49?: Flex__<"div">;
  paragraph410?: Flex__<"div">;
  h25?: Flex__<"div">;
  h35?: Flex__<"div">;
  offer2?: Flex__<typeof Offer2>;
  offerH2?: Flex__<"div">;
  offerParagraph?: Flex__<"div">;
  imageFive?: Flex__<typeof Editable>;
  image52?: Flex__<typeof PlasmicImg__>;
  editImage5?: Flex__<typeof TextInput>;
  paragraphFive?: Flex__<typeof Editable>;
  text92?: Flex__<"div">;
  editText9?: Flex__<typeof TextInput>;
  h26?: Flex__<"div">;
  imageSix?: Flex__<typeof Editable>;
  image62?: Flex__<typeof PlasmicImg__>;
  editImage6?: Flex__<typeof TextInput>;
  paragraphSix?: Flex__<typeof Editable>;
  text102?: Flex__<"div">;
  editText10?: Flex__<typeof TextInput>;
  h27?: Flex__<"div">;
  image7?: Flex__<typeof PlasmicImg__>;
  outroHeadline1?: Flex__<typeof Editable>;
  text222?: Flex__<"a"> & Partial<LinkProps>;
  editText22?: Flex__<typeof TextInput>;
  cta2?: Flex__<"div">;
  cta4?: Flex__<typeof Editable>;
  text33?: Flex__<"div">;
  editText32?: Flex__<typeof TextInput>;
  outroHeadline2?: Flex__<typeof Editable>;
  text202?: Flex__<"div">;
  editText20?: Flex__<typeof TextInput>;
  reviewStars?: Flex__<typeof Editable>;
  image82?: Flex__<typeof PlasmicImg__>;
  editImage8?: Flex__<typeof TextInput>;
  outroHeadline3?: Flex__<typeof Editable>;
  text21?: Flex__<"div">;
  editText21?: Flex__<typeof TextInput>;
  imageSeven?: Flex__<typeof Editable>;
  image92?: Flex__<typeof PlasmicImg__>;
  editImage9?: Flex__<typeof TextInput>;
  image102?: Flex__<typeof PlasmicImg__>;
  editImage10?: Flex__<typeof TextInput>;
  text112?: Flex__<"div">;
  editText11?: Flex__<typeof TextInput>;
  image84?: Flex__<typeof PlasmicImg__>;
  editImage8A?: Flex__<typeof TextInput>;
  review1PrimaryHeadline?: Flex__<typeof Editable>;
  text122?: Flex__<"div">;
  editText12?: Flex__<typeof TextInput>;
  review1Body?: Flex__<typeof Editable>;
  text132?: Flex__<"div">;
  editText13?: Flex__<typeof TextInput>;
  image11?: Flex__<typeof PlasmicImg__>;
  editImage11?: Flex__<typeof TextInput>;
  text142?: Flex__<"div">;
  editText14?: Flex__<typeof TextInput>;
  image86?: Flex__<typeof PlasmicImg__>;
  editImage8B?: Flex__<typeof TextInput>;
  review2PrimaryHeadline?: Flex__<typeof Editable>;
  text152?: Flex__<"div">;
  editText15?: Flex__<typeof TextInput>;
  review2Body?: Flex__<typeof Editable>;
  text162?: Flex__<"div">;
  editText16?: Flex__<typeof TextInput>;
  image122?: Flex__<typeof PlasmicImg__>;
  editImage12?: Flex__<typeof TextInput>;
  text172?: Flex__<"div">;
  editText17?: Flex__<typeof TextInput>;
  image83?: Flex__<typeof PlasmicImg__>;
  editImage8C?: Flex__<typeof TextInput>;
  review3PrimaryHeadline?: Flex__<typeof Editable>;
  text182?: Flex__<"div">;
  editText18?: Flex__<typeof TextInput>;
  review3Body?: Flex__<typeof Editable>;
  text192?: Flex__<"div">;
  editText19?: Flex__<typeof TextInput>;
  reviewIcon6?: Flex__<typeof PlasmicImg__>;
  reviewStatement?: Flex__<"div">;
  ctaCardH1?: Flex__<"div">;
  ctaCardH2?: Flex__<"div">;
  aCta3?: Flex__<"a"> & Partial<LinkProps>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultAdvertorialProps {
  slot9?: React.ReactNode;
  pageId?: number;
  editable?: string;
  onEdit?: () => void;
  articleParagraph24?: string;
  onArticleParagraph24Change?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdvertorial__RenderFunc(props: {
  variants: PlasmicAdvertorial__VariantsArgs;
  args: PlasmicAdvertorial__ArgsType;
  overrides: PlasmicAdvertorial__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          pageId: 85,
          editable: "true"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "editText2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text2 || $queries?.cms?.data[0]?.text_2;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "articleHeadlineState",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage1.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "articleImage1State",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text5 || $queries?.cms?.data[0]?.text_5;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "articleParagraph1State",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.image10 || $queries?.cms?.data[0]?.image_10;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "reviewMugshot1State",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text6 || $queries?.cms?.data[0]?.text_6;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "articleParagraph24",
        type: "writable",
        variableType: "text",

        valueProp: "articleParagraph24",
        onChangeProp: "onArticleParagraph24Change"
      },
      {
        path: "editText8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text8 || $queries?.cms?.data[0]?.text_8;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "articleParagraph42",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text9 || $queries?.cms?.data[0]?.text_9;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "articleParagraph52",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text10 || $queries?.cms?.data[0]?.text_10;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "articleParagraph62",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text7 || $queries?.cms?.data[0]?.text_7;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "articleParagraph32",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "articleCta3",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editLogo.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "logo2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText1.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text1 || $queries?.cms?.data[0]?.text_1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "articleSlogan2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.image11 || $queries?.cms?.data[0]?.image_11;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "reviewMugshot22",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.image12 || $queries?.cms?.data[0]?.image_12;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "reviewMugshot32",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text11 || $queries.cms?.data[0]?.text_11;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "reviewName12",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text14 || $queries.cms?.data[0]?.text_14;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "reviewName22",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "reviewName32",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text17 || $queries.cms?.data[0]?.text_17;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "text1",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text3",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text4",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text5",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text6",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text7",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text8",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text9",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text10",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text12",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text11",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text13",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text14",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text15",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text16",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text17",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text18",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text19",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text20",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "image1",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "image2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "image3",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "image4",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "image5",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "image6",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "image72",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "image8",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "image9",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "image10",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText32.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text3 || $queries?.cms?.data[0]?.text_3;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editText4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text4 || $queries?.cms?.data[0]?.text_4;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editImage2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText22.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text22 || $queries?.cms?.data[0]?.text_22;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "text212",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text223",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text23",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text24",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText20.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text20 || $queries?.cms?.data[0]?.text_20;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editText21.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text21 || $queries?.cms?.data[0]?.text_21;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editImage8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage8B.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage8A.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage8C.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text13 || $queries.cms?.data[0]?.text_13;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editText12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text12 || $queries.cms?.data[0]?.text_12;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editText15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text15 || $queries.cms?.data[0]?.text_15;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editText16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text16 || $queries.cms?.data[0]?.text_16;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "image123",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "image112",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "image13",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "image14",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText18.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text18 || $queries.cms?.data[0]?.text_18;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editText19.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.text19 || $queries.cms?.data[0]?.text_19;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    cms: usePlasmicDataOp(() => {
      return {
        sourceId: "jhyRJR71TBt7ca5EZWznEH",
        opId: "fdaa65ed-8fe6-4653-a7be-ede6eac7d018",
        userArgs: {
          filters: [$queries.pages.data[0].cms]
        },
        cacheKey: `plasmic.$.fdaa65ed-8fe6-4653-a7be-ede6eac7d018.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    pages: usePlasmicDataOp(() => {
      return {
        sourceId: "jhyRJR71TBt7ca5EZWznEH",
        opId: "216aa8eb-b88d-4599-b4a9-9fe66b4d79c0",
        userArgs: {
          filters: [$props.pageId]
        },
        cacheKey: `plasmic.$.216aa8eb-b88d-4599-b4a9-9fe66b4d79c0.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqG0QbBk7DXxf()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_legacy_feed_page_designs_css.plasmic_tokens,
        sty.root
      )}
    >
      {(() => {
        try {
          return $queries.cms.data.length > 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"nav"}
          data-plasmic-override={overrides.nav}
          className={classNames(projectcss.all, sty.nav)}
        >
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__ikIOb)}>
              <Editable
                data-plasmic-name={"logo3"}
                data-plasmic-override={overrides.logo3}
                className={classNames("__wab_instance", sty.logo3)}
                edit2={
                  <TextInput
                    data-plasmic-name={"editLogo"}
                    data-plasmic-override={overrides.editLogo}
                    className={classNames("__wab_instance", sty.editLogo)}
                    endIcon={null}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editLogo",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      (async event => {
                        const $steps = {};

                        $steps["updateLogo2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["logo2"]
                                },
                                operation: 0,
                                value: $state.editLogo.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLogo2"] != null &&
                          typeof $steps["updateLogo2"] === "object" &&
                          typeof $steps["updateLogo2"].then === "function"
                        ) {
                          $steps["updateLogo2"] = await $steps["updateLogo2"];
                        }

                        $steps["postgresUpdateById"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                  opId: "6f00c8e1-1324-4d71-bd11-8b695829b1ad",
                                  userArgs: {
                                    keys: [$queries.pages.data[0].cms],
                                    variables: [$state.editLogo.value]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateById"] != null &&
                          typeof $steps["postgresUpdateById"] === "object" &&
                          typeof $steps["postgresUpdateById"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateById"] = await $steps[
                            "postgresUpdateById"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={(() => {
                      try {
                        return $state.logo2 || $queries?.cms?.data[0]?.logo;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    startIcon={null}
                    value={
                      generateStateValueProp($state, ["editLogo", "value"]) ??
                      ""
                    }
                  />
                }
                editEnabled={(() => {
                  try {
                    return $props.editable == "true";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "editEnabled";
                    }
                    throw e;
                  }
                })()}
              >
                <PlasmicImg__
                  data-plasmic-name={"logo"}
                  data-plasmic-override={overrides.logo}
                  alt={""}
                  className={classNames(sty.logo)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"125px"}
                  loading={"eager"}
                  src={$state.logo2 || $queries?.cms?.data[0]?.logo}
                />
              </Editable>
            </div>
            <div className={classNames(projectcss.all, sty.column___895Yx)}>
              <Editable
                data-plasmic-name={"slogan"}
                data-plasmic-override={overrides.slogan}
                className={classNames("__wab_instance", sty.slogan)}
                edit2={
                  <TextInput
                    data-plasmic-name={"editText1"}
                    data-plasmic-override={overrides.editText1}
                    className={classNames("__wab_instance", sty.editText1)}
                    endIcon={null}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText1",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      (async event => {
                        const $steps = {};

                        $steps["updateText1"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["text1"]
                                },
                                operation: 0,
                                value: $state.editText1.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateText1"] != null &&
                          typeof $steps["updateText1"] === "object" &&
                          typeof $steps["updateText1"].then === "function"
                        ) {
                          $steps["updateText1"] = await $steps["updateText1"];
                        }

                        $steps["postgresUpdateById"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                  opId: "236db9b2-2930-4b9d-97c3-41b60e639593",
                                  userArgs: {
                                    variables: [$state.editText1.value],
                                    keys: [$queries.pages.data[0].cms]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateById"] != null &&
                          typeof $steps["postgresUpdateById"] === "object" &&
                          typeof $steps["postgresUpdateById"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateById"] = await $steps[
                            "postgresUpdateById"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={(() => {
                      try {
                        return $state.text1 || $queries?.cms?.data[0]?.text_1;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    startIcon={null}
                    value={
                      generateStateValueProp($state, ["editText1", "value"]) ??
                      ""
                    }
                  />
                }
                editEnabled={(() => {
                  try {
                    return $props.editable == "true";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "editEnabled";
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  data-plasmic-name={"text110"}
                  data-plasmic-override={overrides.text110}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text110
                  )}
                >
                  <React.Fragment>
                    {$state.text1 || $queries?.cms?.data[0]?.text_1}
                  </React.Fragment>
                </div>
              </Editable>
            </div>
          </div>
        </div>
      ) : null}
      {(() => {
        try {
          return $queries.cms.data.length > 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"intro"}
          data-plasmic-override={overrides.intro}
          className={classNames(projectcss.all, sty.intro)}
        >
          <Editable
            data-plasmic-name={"heroHeadline"}
            data-plasmic-override={overrides.heroHeadline}
            className={classNames("__wab_instance", sty.heroHeadline)}
            edit2={
              <TextInput
                data-plasmic-name={"editText2"}
                data-plasmic-override={overrides.editText2}
                className={classNames("__wab_instance", sty.editText2)}
                endIcon={null}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["editText2", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);
                  (async event => {
                    const $steps = {};

                    $steps["updateArticleHeadline"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["text2"]
                            },
                            operation: 0,
                            value: $state.editText2.value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateArticleHeadline"] != null &&
                      typeof $steps["updateArticleHeadline"] === "object" &&
                      typeof $steps["updateArticleHeadline"].then === "function"
                    ) {
                      $steps["updateArticleHeadline"] = await $steps[
                        "updateArticleHeadline"
                      ];
                    }

                    $steps["postgresUpdateById"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "jhyRJR71TBt7ca5EZWznEH",
                              opId: "fc2acb52-227b-4d0d-9935-26af9642e16d",
                              userArgs: {
                                variables: [$state.editText2.value],
                                keys: [$queries.pages.data[0].cms]
                              },
                              cacheKey: null,
                              invalidatedKeys: [],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postgresUpdateById"] != null &&
                      typeof $steps["postgresUpdateById"] === "object" &&
                      typeof $steps["postgresUpdateById"].then === "function"
                    ) {
                      $steps["postgresUpdateById"] = await $steps[
                        "postgresUpdateById"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
                startIcon={null}
                value={
                  generateStateValueProp($state, ["editText2", "value"]) ?? ""
                }
              />
            }
            editEnabled={(() => {
              try {
                return $props.editable == "true";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
          >
            <div
              data-plasmic-name={"text22"}
              data-plasmic-override={overrides.text22}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text22
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                <React.Fragment>
                  {$queries?.cms?.data[0]?.text_2}
                </React.Fragment>
              ) : (
                <React.Fragment>
                  {$state.text2 || $queries?.cms?.data[0]?.text_2}
                </React.Fragment>
              )}
            </div>
          </Editable>
          <Editable
            data-plasmic-name={"heroSubHeadline2"}
            data-plasmic-override={overrides.heroSubHeadline2}
            className={classNames("__wab_instance", sty.heroSubHeadline2)}
            edit2={
              <TextInput
                data-plasmic-name={"editText4"}
                data-plasmic-override={overrides.editText4}
                className={classNames("__wab_instance", sty.editText4)}
                endIcon={null}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["editText4", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);
                  (async event => {
                    const $steps = {};

                    $steps["updateText4"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["text4"]
                            },
                            operation: 0,
                            value: $state.editText4.value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateText4"] != null &&
                      typeof $steps["updateText4"] === "object" &&
                      typeof $steps["updateText4"].then === "function"
                    ) {
                      $steps["updateText4"] = await $steps["updateText4"];
                    }

                    $steps["postgresUpdateById"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "jhyRJR71TBt7ca5EZWznEH",
                              opId: "5b9a9932-d3ec-4ec8-85bd-c6e073a9efeb",
                              userArgs: {
                                variables: [$state.editText4.value],
                                keys: [$queries.pages.data[0].cms]
                              },
                              cacheKey: null,
                              invalidatedKeys: [],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postgresUpdateById"] != null &&
                      typeof $steps["postgresUpdateById"] === "object" &&
                      typeof $steps["postgresUpdateById"].then === "function"
                    ) {
                      $steps["postgresUpdateById"] = await $steps[
                        "postgresUpdateById"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
                placeholder={(() => {
                  try {
                    return $state.text4 || $queries?.cms?.data[0]?.text_4;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                startIcon={null}
                value={
                  generateStateValueProp($state, ["editText4", "value"]) ?? ""
                }
              />
            }
            editEnabled={(() => {
              try {
                return $props.editable == "true";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
          >
            <div
              data-plasmic-name={"heroSubHeadline"}
              data-plasmic-override={overrides.heroSubHeadline}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.heroSubHeadline
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.cms.data[0].text_4;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ) : (
                <React.Fragment>
                  {$state.text4 || $queries?.cms?.data[0]?.text_4}
                </React.Fragment>
              )}
            </div>
          </Editable>
          {(() => {
            try {
              return $queries?.cms?.data[0]?.text_3 != null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"cta"}
              data-plasmic-override={overrides.cta}
              className={classNames(projectcss.all, sty.cta)}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return $ctx?.fetchedData?.records[0]?.fields[
                              "Step 2 URL"
                            ];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
            >
              <Editable
                data-plasmic-name={"cta3"}
                data-plasmic-override={overrides.cta3}
                className={classNames("__wab_instance", sty.cta3)}
                edit2={
                  <TextInput
                    data-plasmic-name={"editText3"}
                    data-plasmic-override={overrides.editText3}
                    className={classNames("__wab_instance", sty.editText3)}
                    endIcon={null}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText3",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      (async event => {
                        const $steps = {};

                        $steps["updateText3"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["text3"]
                                },
                                operation: 0,
                                value: $state.editText3.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateText3"] != null &&
                          typeof $steps["updateText3"] === "object" &&
                          typeof $steps["updateText3"].then === "function"
                        ) {
                          $steps["updateText3"] = await $steps["updateText3"];
                        }

                        $steps["postgresUpdateById"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                  opId: "29cb668e-33fc-4f74-852e-949aeee9fff5",
                                  userArgs: {
                                    variables: [$state.editText3.value],
                                    keys: [$queries.pages.data[0].cms]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateById"] != null &&
                          typeof $steps["postgresUpdateById"] === "object" &&
                          typeof $steps["postgresUpdateById"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateById"] = await $steps[
                            "postgresUpdateById"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={(() => {
                      try {
                        return $state.text3 || $queries?.cms?.data[0]?.text_3;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    startIcon={null}
                    value={
                      generateStateValueProp($state, ["editText3", "value"]) ??
                      ""
                    }
                  />
                }
                editEnabled={(() => {
                  try {
                    return $props.editable == "true";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  data-plasmic-name={"text32"}
                  data-plasmic-override={overrides.text32}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text32
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.text3 || $queries?.cms?.data[0]?.text_3;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "CTA Text";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Editable>
            </div>
          ) : null}
          {(() => {
            try {
              return $queries.cms.data[0].review_statement != null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__pm5Cg)}>
              <PlasmicImg__
                data-plasmic-name={"reviewIcon2"}
                data-plasmic-override={overrides.reviewIcon2}
                alt={""}
                className={classNames(sty.reviewIcon2)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "11px"
                    : "auto"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.review_icon[0]
                      .url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return {
                        src: "/plasmic/legacy_feed_page_designs/images/starpng.png",
                        fullWidth: 142,
                        fullHeight: 21,
                        aspectRatio: undefined
                      };
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"reviewStatement2"}
                data-plasmic-override={overrides.reviewStatement2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.reviewStatement2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.cms.data[0].review_statement;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          ) : null}
        </div>
      ) : null}
      {(() => {
        try {
          return $queries.cms.data.length > 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"body"}
          data-plasmic-override={overrides.body}
          className={classNames(projectcss.all, sty.body)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__yBzVe)}>
            <div
              data-plasmic-name={"articleBody"}
              data-plasmic-override={overrides.articleBody}
              className={classNames(projectcss.all, sty.articleBody)}
            >
              {(() => {
                try {
                  return $queries.cms.data[0].press_icon != null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"press"}
                  data-plasmic-override={overrides.press}
                  className={classNames(projectcss.all, sty.press)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3A4Ye
                    )}
                  >
                    {"As Featured In:"}
                  </div>
                  <PlasmicImg__
                    data-plasmic-name={"pressIcon"}
                    data-plasmic-override={overrides.pressIcon}
                    alt={""}
                    className={classNames(sty.pressIcon)}
                    displayHeight={"auto"}
                    displayMaxHeight={"35px"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "300px"
                        : "475px"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return $queries.cms.data[0].press_icon;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return {
                            src: "/plasmic/legacy_feed_page_designs/images/presssvg.svg",
                            fullWidth: 300,
                            fullHeight: 20,
                            aspectRatio: 15.325
                          };
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
              ) : null}
              {(() => {
                try {
                  return $queries?.cms?.data[0]?.image_1 != null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___0Wds3
                  )}
                  component={Link}
                  href={(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  platform={"nextjs"}
                >
                  <Editable
                    data-plasmic-name={"imageOne"}
                    data-plasmic-override={overrides.imageOne}
                    className={classNames("__wab_instance", sty.imageOne)}
                    edit2={
                      <TextInput
                        data-plasmic-name={"editImage1"}
                        data-plasmic-override={overrides.editImage1}
                        className={classNames("__wab_instance", sty.editImage1)}
                        endIcon={null}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "editImage1",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }).apply(null, eventArgs);
                          (async event => {
                            const $steps = {};

                            $steps["updateImage1"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["image1"]
                                    },
                                    operation: 0,
                                    value: $state.editImage1.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateImage1"] != null &&
                              typeof $steps["updateImage1"] === "object" &&
                              typeof $steps["updateImage1"].then === "function"
                            ) {
                              $steps["updateImage1"] = await $steps[
                                "updateImage1"
                              ];
                            }

                            $steps["postgresUpdateById"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                      opId: "5c4a03b0-7836-43c5-9221-7fbd7eac18a2",
                                      userArgs: {
                                        keys: [$queries.pages.data[0].cms],
                                        variables: [$state.editImage1.value]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["postgresUpdateById"] != null &&
                              typeof $steps["postgresUpdateById"] ===
                                "object" &&
                              typeof $steps["postgresUpdateById"].then ===
                                "function"
                            ) {
                              $steps["postgresUpdateById"] = await $steps[
                                "postgresUpdateById"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                        placeholder={(() => {
                          try {
                            return (
                              $state.image1 || $queries?.cms?.data[0]?.image_1
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        startIcon={null}
                        value={
                          generateStateValueProp($state, [
                            "editImage1",
                            "value"
                          ]) ?? ""
                        }
                      />
                    }
                    editEnabled={(() => {
                      try {
                        return $props.editable == "true";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"image12"}
                      data-plasmic-override={overrides.image12}
                      alt={""}
                      className={classNames(sty.image12)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "auto"
                          : "761px"
                      }
                      displayWidth={"100%"}
                      loading={"eager"}
                      src={$state.image1 || $queries?.cms?.data[0]?.image_1}
                    />
                  </Editable>
                </PlasmicLink__>
              ) : null}
              <Editable
                data-plasmic-name={"paragraphOne"}
                data-plasmic-override={overrides.paragraphOne}
                className={classNames("__wab_instance", sty.paragraphOne)}
                edit2={
                  <TextInput
                    data-plasmic-name={"editText5"}
                    data-plasmic-override={overrides.editText5}
                    className={classNames("__wab_instance", sty.editText5)}
                    endIcon={null}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText5",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      (async event => {
                        const $steps = {};

                        $steps["updateText5"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["text5"]
                                },
                                operation: 0,
                                value: $state.editText5.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateText5"] != null &&
                          typeof $steps["updateText5"] === "object" &&
                          typeof $steps["updateText5"].then === "function"
                        ) {
                          $steps["updateText5"] = await $steps["updateText5"];
                        }

                        $steps["updateEditArticleHeadlineValue"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                  opId: "a1e2ec7d-c78e-4147-8f31-4d1d888af748",
                                  userArgs: {
                                    variables: [$state.editText5.value],
                                    keys: [$queries.pages.data[0].cms]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateEditArticleHeadlineValue"] != null &&
                          typeof $steps["updateEditArticleHeadlineValue"] ===
                            "object" &&
                          typeof $steps["updateEditArticleHeadlineValue"]
                            .then === "function"
                        ) {
                          $steps["updateEditArticleHeadlineValue"] =
                            await $steps["updateEditArticleHeadlineValue"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    startIcon={null}
                    value={
                      generateStateValueProp($state, ["editText5", "value"]) ??
                      ""
                    }
                  />
                }
                editEnabled={(() => {
                  try {
                    return $props.editable == "true";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "editEnabled";
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  data-plasmic-name={"text52"}
                  data-plasmic-override={overrides.text52}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text52
                  )}
                >
                  <React.Fragment>
                    {$state.text5 || $queries?.cms?.data[0]?.text_5}
                  </React.Fragment>
                </div>
              </Editable>
              <div
                data-plasmic-name={"h21"}
                data-plasmic-override={overrides.h21}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.h21
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.h2_1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "All Of The Above Is Possible…With Sparq’s Vitamin Air®.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              {(() => {
                try {
                  return $queries?.cms?.data[0]?.image_2 != null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__pthY2
                  )}
                  component={Link}
                  href={(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  platform={"nextjs"}
                >
                  <Editable
                    data-plasmic-name={"imageTwo"}
                    data-plasmic-override={overrides.imageTwo}
                    className={classNames("__wab_instance", sty.imageTwo)}
                    edit2={
                      <TextInput
                        data-plasmic-name={"editImage2"}
                        data-plasmic-override={overrides.editImage2}
                        className={classNames("__wab_instance", sty.editImage2)}
                        endIcon={null}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "editImage2",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }).apply(null, eventArgs);
                          (async event => {
                            const $steps = {};

                            $steps["updateImage2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["image2"]
                                    },
                                    operation: 0,
                                    value: $state.editImage2.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateImage2"] != null &&
                              typeof $steps["updateImage2"] === "object" &&
                              typeof $steps["updateImage2"].then === "function"
                            ) {
                              $steps["updateImage2"] = await $steps[
                                "updateImage2"
                              ];
                            }

                            $steps["postgresUpdateById"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                      opId: "001e996c-6bbc-4458-aa80-3be5950520e5",
                                      userArgs: {
                                        variables: [$state.editImage2.value],
                                        keys: [$queries.pages.data[0].cms]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["postgresUpdateById"] != null &&
                              typeof $steps["postgresUpdateById"] ===
                                "object" &&
                              typeof $steps["postgresUpdateById"].then ===
                                "function"
                            ) {
                              $steps["postgresUpdateById"] = await $steps[
                                "postgresUpdateById"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                        placeholder={(() => {
                          try {
                            return (
                              $state.image2 || $queries?.cms?.data[0]?.image_2
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        startIcon={null}
                        value={
                          generateStateValueProp($state, [
                            "editImage2",
                            "value"
                          ]) ?? ""
                        }
                      />
                    }
                    editEnabled={(() => {
                      try {
                        return $props.editable == "true";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"image22"}
                      data-plasmic-override={overrides.image22}
                      alt={""}
                      className={classNames(sty.image22)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "auto"
                          : "761px"
                      }
                      displayWidth={"100%"}
                      loading={"eager"}
                      src={(() => {
                        try {
                          return (
                            $state.image2 || $queries?.cms?.data[0]?.image_2
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </Editable>
                </PlasmicLink__>
              ) : null}
              <Editable
                data-plasmic-name={"paragraphTwo"}
                data-plasmic-override={overrides.paragraphTwo}
                className={classNames("__wab_instance", sty.paragraphTwo)}
                edit2={
                  <TextInput
                    data-plasmic-name={"editText6"}
                    data-plasmic-override={overrides.editText6}
                    className={classNames("__wab_instance", sty.editText6)}
                    endIcon={null}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText6",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      (async event => {
                        const $steps = {};

                        $steps["updateEditArticleHeadlineValue"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["text6"]
                                },
                                operation: 0,
                                value: $state.editText6.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateEditArticleHeadlineValue"] != null &&
                          typeof $steps["updateEditArticleHeadlineValue"] ===
                            "object" &&
                          typeof $steps["updateEditArticleHeadlineValue"]
                            .then === "function"
                        ) {
                          $steps["updateEditArticleHeadlineValue"] =
                            await $steps["updateEditArticleHeadlineValue"];
                        }

                        $steps["updateEditArticleHeadlineValue2"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                  opId: "5ebad318-d3fc-4d9a-88a2-d4c51f5cb8f9",
                                  userArgs: {
                                    variables: [$state.editText6.value],
                                    keys: [$queries.pages.data[0].cms]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateEditArticleHeadlineValue2"] != null &&
                          typeof $steps["updateEditArticleHeadlineValue2"] ===
                            "object" &&
                          typeof $steps["updateEditArticleHeadlineValue2"]
                            .then === "function"
                        ) {
                          $steps["updateEditArticleHeadlineValue2"] =
                            await $steps["updateEditArticleHeadlineValue2"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    startIcon={null}
                    value={
                      generateStateValueProp($state, ["editText6", "value"]) ??
                      ""
                    }
                  />
                }
                editEnabled={(() => {
                  try {
                    return $props.editable == "true";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  data-plasmic-name={"text62"}
                  data-plasmic-override={overrides.text62}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text62
                  )}
                >
                  <React.Fragment>
                    {$state.text6 || $queries?.cms?.data[0]?.text_6}
                  </React.Fragment>
                </div>
              </Editable>
              <div
                data-plasmic-name={"h22"}
                data-plasmic-override={overrides.h22}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.h22
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.h2_2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Are YOU One Of These Two Types Of People?";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              {(() => {
                try {
                  return $queries?.cms?.data[0]?.image_3 != null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__ve30
                  )}
                  component={Link}
                  href={(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  platform={"nextjs"}
                >
                  <Editable
                    data-plasmic-name={"imageThree"}
                    data-plasmic-override={overrides.imageThree}
                    className={classNames("__wab_instance", sty.imageThree)}
                    edit2={
                      <TextInput
                        data-plasmic-name={"editImage3"}
                        data-plasmic-override={overrides.editImage3}
                        className={classNames("__wab_instance", sty.editImage3)}
                        endIcon={null}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "editImage3",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }).apply(null, eventArgs);
                          (async event => {
                            const $steps = {};

                            $steps["updateImage3"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["image3"]
                                    },
                                    operation: 0,
                                    value: $state.editImage3.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateImage3"] != null &&
                              typeof $steps["updateImage3"] === "object" &&
                              typeof $steps["updateImage3"].then === "function"
                            ) {
                              $steps["updateImage3"] = await $steps[
                                "updateImage3"
                              ];
                            }

                            $steps["postgresUpdateById"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                      opId: "d935b6d5-81d3-4867-8a76-13966223c35f",
                                      userArgs: {
                                        variables: [$state.editImage3.value],
                                        keys: [$queries.pages.data[0].cms]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["postgresUpdateById"] != null &&
                              typeof $steps["postgresUpdateById"] ===
                                "object" &&
                              typeof $steps["postgresUpdateById"].then ===
                                "function"
                            ) {
                              $steps["postgresUpdateById"] = await $steps[
                                "postgresUpdateById"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                        placeholder={(() => {
                          try {
                            return (
                              $state.image3 || $queries?.cms?.data[0]?.image_3
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        startIcon={null}
                        value={
                          generateStateValueProp($state, [
                            "editImage3",
                            "value"
                          ]) ?? ""
                        }
                      />
                    }
                    editEnabled={(() => {
                      try {
                        return $props.editable == "true";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"image32"}
                      data-plasmic-override={overrides.image32}
                      alt={""}
                      className={classNames(sty.image32)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "auto"
                          : "761px"
                      }
                      displayWidth={"100%"}
                      loading={"eager"}
                      src={(() => {
                        try {
                          return (
                            $state.image3 || $queries?.cms?.data[0]?.image_3
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </Editable>
                </PlasmicLink__>
              ) : null}
              <Editable
                data-plasmic-name={"paragraphThree"}
                data-plasmic-override={overrides.paragraphThree}
                className={classNames("__wab_instance", sty.paragraphThree)}
                edit2={
                  <TextInput
                    data-plasmic-name={"editText7"}
                    data-plasmic-override={overrides.editText7}
                    className={classNames("__wab_instance", sty.editText7)}
                    endIcon={null}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText7",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      (async event => {
                        const $steps = {};

                        $steps["updateText7"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["text7"]
                                },
                                operation: 0,
                                value: $state.editText7.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateText7"] != null &&
                          typeof $steps["updateText7"] === "object" &&
                          typeof $steps["updateText7"].then === "function"
                        ) {
                          $steps["updateText7"] = await $steps["updateText7"];
                        }

                        $steps["postgresUpdateById"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                  opId: "463b4d90-82b1-4841-b80a-0c4e970aa6cb",
                                  userArgs: {
                                    variables: [$state.editText7.value],
                                    keys: [$queries.pages.data[0].cms]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateById"] != null &&
                          typeof $steps["postgresUpdateById"] === "object" &&
                          typeof $steps["postgresUpdateById"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateById"] = await $steps[
                            "postgresUpdateById"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={`Enter something…${
                      $state.text7 || $queries?.cms?.data[0]?.text_7
                    }`}
                    startIcon={null}
                    value={
                      generateStateValueProp($state, ["editText7", "value"]) ??
                      ""
                    }
                  />
                }
                editEnabled={(() => {
                  try {
                    return $props.editable == "true";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  data-plasmic-name={"text72"}
                  data-plasmic-override={overrides.text72}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text72
                  )}
                >
                  <React.Fragment>
                    {$state.text7 || $queries?.cms?.data[0]?.text_7}
                  </React.Fragment>
                </div>
              </Editable>
              <div
                data-plasmic-name={"h23"}
                data-plasmic-override={overrides.h23}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.h23
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.h2_3;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Sparq Has The Answers You’re Looking for:";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              {(() => {
                try {
                  return $queries?.cms?.data[0]?.image_4 != null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__f6Uu
                  )}
                  component={Link}
                  href={(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  platform={"nextjs"}
                >
                  <Editable
                    data-plasmic-name={"imageFour"}
                    data-plasmic-override={overrides.imageFour}
                    className={classNames("__wab_instance", sty.imageFour)}
                    edit2={
                      <TextInput
                        data-plasmic-name={"editImage4"}
                        data-plasmic-override={overrides.editImage4}
                        className={classNames("__wab_instance", sty.editImage4)}
                        endIcon={null}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "editImage4",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }).apply(null, eventArgs);
                          (async event => {
                            const $steps = {};

                            $steps["updateImage4"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["image4"]
                                    },
                                    operation: 0,
                                    value: $state.editImage4.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateImage4"] != null &&
                              typeof $steps["updateImage4"] === "object" &&
                              typeof $steps["updateImage4"].then === "function"
                            ) {
                              $steps["updateImage4"] = await $steps[
                                "updateImage4"
                              ];
                            }

                            $steps["postgresUpdateById"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                      opId: "9db9e3a4-7592-4aec-b996-3ffb51789827",
                                      userArgs: {
                                        keys: [$queries.pages.data[0].cms],
                                        variables: [$state.editImage4.value]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["postgresUpdateById"] != null &&
                              typeof $steps["postgresUpdateById"] ===
                                "object" &&
                              typeof $steps["postgresUpdateById"].then ===
                                "function"
                            ) {
                              $steps["postgresUpdateById"] = await $steps[
                                "postgresUpdateById"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                        placeholder={(() => {
                          try {
                            return (
                              $state.image4 || $queries?.cms?.data[0]?.image_4
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        startIcon={null}
                        value={
                          generateStateValueProp($state, [
                            "editImage4",
                            "value"
                          ]) ?? ""
                        }
                      />
                    }
                    editEnabled={(() => {
                      try {
                        return $props.editable == "true";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"image42"}
                      data-plasmic-override={overrides.image42}
                      alt={""}
                      className={classNames(sty.image42)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "auto"
                          : "761px"
                      }
                      displayWidth={"100%"}
                      loading={"eager"}
                      src={$state.image4 || $queries?.cms?.data[0]?.image_4}
                    />
                  </Editable>
                </PlasmicLink__>
              ) : null}
              <Editable
                data-plasmic-name={"paragraphFour"}
                data-plasmic-override={overrides.paragraphFour}
                className={classNames("__wab_instance", sty.paragraphFour)}
                edit2={
                  <TextInput
                    data-plasmic-name={"editText8"}
                    data-plasmic-override={overrides.editText8}
                    className={classNames("__wab_instance", sty.editText8)}
                    endIcon={null}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText8",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      (async event => {
                        const $steps = {};

                        $steps["updateText8"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["text8"]
                                },
                                operation: 0,
                                value: $state.editText8.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateText8"] != null &&
                          typeof $steps["updateText8"] === "object" &&
                          typeof $steps["updateText8"].then === "function"
                        ) {
                          $steps["updateText8"] = await $steps["updateText8"];
                        }

                        $steps["postgresUpdateById"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                  opId: "d14c2b21-0c1f-4866-8c6f-3f3e0cedeeae",
                                  userArgs: {
                                    keys: [$queries.pages.data[0].cms],
                                    variables: [$state.editText8.value]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateById"] != null &&
                          typeof $steps["postgresUpdateById"] === "object" &&
                          typeof $steps["postgresUpdateById"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateById"] = await $steps[
                            "postgresUpdateById"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    startIcon={null}
                    value={
                      generateStateValueProp($state, ["editText8", "value"]) ??
                      ""
                    }
                  />
                }
                editEnabled={(() => {
                  try {
                    return $props.editable == "true";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "editEnabled";
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  data-plasmic-name={"text82"}
                  data-plasmic-override={overrides.text82}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text82
                  )}
                >
                  <React.Fragment>
                    {$state.text8 || $queries?.cms?.data[0]?.text_8}
                  </React.Fragment>
                </div>
              </Editable>
              <div
                data-plasmic-name={"h24"}
                data-plasmic-override={overrides.h24}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.h24
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.h2_4;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Happy Quitters, Vitamin Lovers, And Healthy Choice Followers Can't Stop Talking About Vitamin Air:";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"review1"}
                data-plasmic-override={overrides.review1}
                className={classNames(projectcss.all, sty.review1)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__l9Pf8)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.review_icon[0]
                        .url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return {
                          src: "/plasmic/legacy_feed_page_designs/images/starpng.png",
                          fullWidth: 142,
                          fullHeight: 21,
                          aspectRatio: undefined
                        };
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  data-plasmic-name={"paragraph42"}
                  data-plasmic-override={overrides.paragraph42}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.paragraph42
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.paragraph4_2;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Amazing product for an amazing price";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"paragraph43"}
                  data-plasmic-override={overrides.paragraph43}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.paragraph43
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.paragraph4_3;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "If you are trying to quit then this is the product for you its amazing and worth every penny.";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"paragraph44"}
                  data-plasmic-override={overrides.paragraph44}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.paragraph44
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.paragraph4_4;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Todd S.";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"review2"}
                data-plasmic-override={overrides.review2}
                className={classNames(projectcss.all, sty.review2)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__hu2LL)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.review_icon[0]
                        .url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return {
                          src: "/plasmic/legacy_feed_page_designs/images/starpng.png",
                          fullWidth: 142,
                          fullHeight: 21,
                          aspectRatio: undefined
                        };
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  data-plasmic-name={"paragraph45"}
                  data-plasmic-override={overrides.paragraph45}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.paragraph45
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.paragraph4_5;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Best friend as I quit cigs!";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"paragraph46"}
                  data-plasmic-override={overrides.paragraph46}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.paragraph46
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.paragraph4_6;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "I love the taste and it doesnt make me cough at all! Super nice product and cool packaging! I will be ordering again!";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"paragraph47"}
                  data-plasmic-override={overrides.paragraph47}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.paragraph47
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.paragraph4_7;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Jessica M.";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"review3"}
                data-plasmic-override={overrides.review3}
                className={classNames(projectcss.all, sty.review3)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__ow39E)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.review_icon[0]
                        .url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return {
                          src: "/plasmic/legacy_feed_page_designs/images/starpng.png",
                          fullWidth: 142,
                          fullHeight: 21,
                          aspectRatio: undefined
                        };
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  data-plasmic-name={"paragraph48"}
                  data-plasmic-override={overrides.paragraph48}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.paragraph48
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.paragraph4_8;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Sparq was very refreshing and awesome";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"paragraph49"}
                  data-plasmic-override={overrides.paragraph49}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.paragraph49
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.paragraph4_9;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "My overall experience was fantastic. I loved the cleanliness of the vapor and how it tasted naturally fruity.";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"paragraph410"}
                  data-plasmic-override={overrides.paragraph410}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.paragraph410
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.paragraph4_10;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Philip G.";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"h25"}
                data-plasmic-override={overrides.h25}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.h25
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.h2_5;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Now you don't have to choose between either Strawberry or Vanilla flavor. ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"h35"}
                data-plasmic-override={overrides.h35}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.h35
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.h3_5;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <Offer2
                data-plasmic-name={"offer2"}
                data-plasmic-override={overrides.offer2}
                className={classNames("__wab_instance", sty.offer2)}
                slot3={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qSq5B
                    )}
                  >
                    {"SPECIAL OFFER"}
                  </div>
                }
                slot4={
                  <div
                    data-plasmic-name={"offerH2"}
                    data-plasmic-override={overrides.offerH2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.offerH2
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return $ctx.fetchedData.records[0].fields.offer_h2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "FREE VITAMIN AIR";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                }
                slot5={
                  <div
                    data-plasmic-name={"offerParagraph"}
                    data-plasmic-override={overrides.offerParagraph}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.offerParagraph
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return $ctx.fetchedData.records[0].fields
                              .offer_paragraph;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Money-Back Guarantee: Better Flavor & Harder Hits or Your Money Back.";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                }
                slot7={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___77KEq
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      "CLAIM FREE DEVICE \ud83d\udc49"
                    ) : (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return $ctx.fetchedData.records[0].fields
                                .offer_cta;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "CLAIM FREE DEVICE 👉";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    )}
                  </div>
                }
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__xow3U)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "auto"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"eager"}
                  src={(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.offer_image[0]
                        .url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return {
                          src: "/plasmic/legacy_feed_page_designs/images/offersvg.svg",
                          fullWidth: 76,
                          fullHeight: 150,
                          aspectRatio: 0.503546
                        };
                      }
                      throw e;
                    }
                  })()}
                />
              </Offer2>
              <div className={classNames(projectcss.all, sty.freeBox__kArR)}>
                <div className={classNames(projectcss.all, sty.freeBox__qeXp)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__csLbx)}
                    displayHeight={"auto"}
                    displayMaxHeight={"425px"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"eager"}
                    src={(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.offer_image[0]
                          .url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return {
                            src: "/plasmic/legacy_feed_page_designs/images/tiVvFyc3RgjD8N1LlgzZkrBppm1PvhYi0XBgysluNUcpng.png",
                            fullWidth: 213,
                            fullHeight: 423,
                            aspectRatio: undefined
                          };
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__beSe)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gp5X
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $ctx.fetchedData.records[0].fields.offer_h1;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "SPECIAL OFFER";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $ctx.fetchedData.records[0].fields.offer_h1;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "SPECIAL OFFER";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    )}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kiZdt
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.fetchedData.records[0].fields.offer_h2;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "FREE VITAMIN AIR";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3N0Ho
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.fetchedData.records[0].fields
                            .offer_paragraph;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Money-Back Guarantee: Better Flavor & Harder Hits or Your Money Back.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__fEfep
                    )}
                    component={Link}
                    href={(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    platform={"nextjs"}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.fetchedData.records[0].fields.offer_cta;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "CHOOSE FLAVOR";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </PlasmicLink__>
                </div>
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__vLc6V
                )}
                component={Link}
                href={(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                platform={"nextjs"}
              >
                <Editable
                  data-plasmic-name={"imageFive"}
                  data-plasmic-override={overrides.imageFive}
                  className={classNames("__wab_instance", sty.imageFive)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editImage5"}
                      data-plasmic-override={overrides.editImage5}
                      className={classNames("__wab_instance", sty.editImage5)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editImage5",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateImage5"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["image5"]
                                  },
                                  operation: 0,
                                  value: $state.editImage5.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateImage5"] != null &&
                            typeof $steps["updateImage5"] === "object" &&
                            typeof $steps["updateImage5"].then === "function"
                          ) {
                            $steps["updateImage5"] = await $steps[
                              "updateImage5"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                    opId: "c339d7c6-e7d1-4be5-bdb6-8ad5a7b90d7f",
                                    userArgs: {
                                      keys: [$state.editText8.value],
                                      variables: [$state.editImage5.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.image5 || $queries?.cms?.data[0]?.image_5
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editImage5",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <PlasmicImg__
                    data-plasmic-name={"image52"}
                    data-plasmic-override={overrides.image52}
                    alt={""}
                    className={classNames(sty.image52)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "761px"
                    }
                    displayWidth={"100%"}
                    loading={"eager"}
                    src={$state.image5 || $queries?.cms?.data[0]?.image_5}
                  />
                </Editable>
              </PlasmicLink__>
              <Editable
                data-plasmic-name={"paragraphFive"}
                data-plasmic-override={overrides.paragraphFive}
                className={classNames("__wab_instance", sty.paragraphFive)}
                edit2={
                  <TextInput
                    data-plasmic-name={"editText9"}
                    data-plasmic-override={overrides.editText9}
                    className={classNames("__wab_instance", sty.editText9)}
                    endIcon={null}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText9",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      (async event => {
                        const $steps = {};

                        $steps["updateText9"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["text9"]
                                },
                                operation: 0,
                                value: $state.editText9.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateText9"] != null &&
                          typeof $steps["updateText9"] === "object" &&
                          typeof $steps["updateText9"].then === "function"
                        ) {
                          $steps["updateText9"] = await $steps["updateText9"];
                        }

                        $steps["postgresUpdateById"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                  opId: "8b7d5d3b-3a25-4c92-acbe-34b68bc99707",
                                  userArgs: {
                                    keys: [$queries.pages.data[0].cms]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateById"] != null &&
                          typeof $steps["postgresUpdateById"] === "object" &&
                          typeof $steps["postgresUpdateById"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateById"] = await $steps[
                            "postgresUpdateById"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={(() => {
                      try {
                        return $state.text9 || $queries?.cms?.data[0]?.text_9;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    startIcon={null}
                    value={
                      generateStateValueProp($state, ["editText9", "value"]) ??
                      ""
                    }
                  />
                }
                editEnabled={(() => {
                  try {
                    return $props.editable == "true";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "editEnabled";
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  data-plasmic-name={"text92"}
                  data-plasmic-override={overrides.text92}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text92
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.text9 || $queries?.cms?.data[0]?.text_9;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Get rid of those nicotine cravings whilst still enjoying that strong and intense throat hit.\n\nSatisfy your oral fixation without consuming toxic substances or harmful chemicals.\n\nReplace those harmful chemicals with vitamins, amino acids, and botanicals.\n\nPromote deep-breathing and relieve anxiety with each vitamin infused inhalation.\n\nEnjoy a healthier alternative without giving up your habit.\n\nTake your device everywhere with its ultramodern and compact design and use it anytime you want.";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Editable>
              <div
                data-plasmic-name={"h26"}
                data-plasmic-override={overrides.h26}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.h26
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.h2_6;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Now you don't have to choose between either Strawberry or Vanilla flavor. ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              {(() => {
                try {
                  return $queries?.cms?.data[0]?.image_6 != null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___202Rs
                  )}
                  component={Link}
                  href={(() => {
                    try {
                      return $ctx?.fetchedData?.records[0]?.fields[
                        "Step 2 URL"
                      ];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  platform={"nextjs"}
                >
                  <Editable
                    data-plasmic-name={"imageSix"}
                    data-plasmic-override={overrides.imageSix}
                    className={classNames("__wab_instance", sty.imageSix)}
                    edit2={
                      <TextInput
                        data-plasmic-name={"editImage6"}
                        data-plasmic-override={overrides.editImage6}
                        className={classNames("__wab_instance", sty.editImage6)}
                        endIcon={null}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "editImage6",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }).apply(null, eventArgs);
                          (async event => {
                            const $steps = {};

                            $steps["updateImage6"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["image6"]
                                    },
                                    operation: 0,
                                    value: $state.editImage6.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateImage6"] != null &&
                              typeof $steps["updateImage6"] === "object" &&
                              typeof $steps["updateImage6"].then === "function"
                            ) {
                              $steps["updateImage6"] = await $steps[
                                "updateImage6"
                              ];
                            }

                            $steps["postgresUpdateById"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                      opId: "984f92da-7451-4938-9cb4-799eeaf11a6c",
                                      userArgs: {
                                        variables: [$state.editImage6.value],
                                        keys: [$queries.pages.data[0].cms]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["postgresUpdateById"] != null &&
                              typeof $steps["postgresUpdateById"] ===
                                "object" &&
                              typeof $steps["postgresUpdateById"].then ===
                                "function"
                            ) {
                              $steps["postgresUpdateById"] = await $steps[
                                "postgresUpdateById"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                        placeholder={(() => {
                          try {
                            return (
                              $state.image6 || $queries?.cms?.data[0]?.image_6
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        startIcon={null}
                        value={
                          generateStateValueProp($state, [
                            "editImage6",
                            "value"
                          ]) ?? ""
                        }
                      />
                    }
                    editEnabled={(() => {
                      try {
                        return $props.editable == "true";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"image62"}
                      data-plasmic-override={overrides.image62}
                      alt={""}
                      className={classNames(sty.image62)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "auto"
                          : "761px"
                      }
                      displayWidth={"100%"}
                      loading={"eager"}
                      src={$state.image6 || $queries?.cms?.data[0]?.image_6}
                    />
                  </Editable>
                </PlasmicLink__>
              ) : null}
              <Editable
                data-plasmic-name={"paragraphSix"}
                data-plasmic-override={overrides.paragraphSix}
                className={classNames("__wab_instance", sty.paragraphSix)}
                edit2={
                  <TextInput
                    data-plasmic-name={"editText10"}
                    data-plasmic-override={overrides.editText10}
                    className={classNames("__wab_instance", sty.editText10)}
                    endIcon={null}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText10",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      (async event => {
                        const $steps = {};

                        $steps["updateText10"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["text10"]
                                },
                                operation: 0,
                                value: $state.editText10.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateText10"] != null &&
                          typeof $steps["updateText10"] === "object" &&
                          typeof $steps["updateText10"].then === "function"
                        ) {
                          $steps["updateText10"] = await $steps["updateText10"];
                        }

                        $steps["postgresUpdateById"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                  opId: "cc86b49e-cb61-472b-a781-c42b20bcd946",
                                  userArgs: {
                                    variables: [$state.editText10.value],
                                    keys: [$queries.pages.data[0].cms]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateById"] != null &&
                          typeof $steps["postgresUpdateById"] === "object" &&
                          typeof $steps["postgresUpdateById"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateById"] = await $steps[
                            "postgresUpdateById"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    startIcon={null}
                    value={
                      generateStateValueProp($state, ["editText10", "value"]) ??
                      ""
                    }
                  />
                }
                editEnabled={(() => {
                  try {
                    return $props.editable == "true";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  data-plasmic-name={"text102"}
                  data-plasmic-override={overrides.text102}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text102
                  )}
                >
                  <React.Fragment>
                    {$state.text10 || $queries?.cms?.data[0]?.text_10}
                  </React.Fragment>
                </div>
              </Editable>
              <div
                data-plasmic-name={"h27"}
                data-plasmic-override={overrides.h27}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.h27
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.h2_7;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Now you don't have to choose between either Strawberry or Vanilla flavor. ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__eyoD
                )}
                component={Link}
                href={(() => {
                  try {
                    return $ctx?.fetchedData?.records[0]?.fields["Step 2 URL"];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                platform={"nextjs"}
              >
                <PlasmicImg__
                  data-plasmic-name={"image7"}
                  data-plasmic-override={overrides.image7}
                  alt={""}
                  className={classNames(sty.image7)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"eager"}
                  src={$state.image7 || $queries?.cms?.data[0]?.image_7}
                />
              </PlasmicLink__>
              <Editable
                data-plasmic-name={"outroHeadline1"}
                data-plasmic-override={overrides.outroHeadline1}
                className={classNames("__wab_instance", sty.outroHeadline1)}
                edit2={
                  <TextInput
                    data-plasmic-name={"editText22"}
                    data-plasmic-override={overrides.editText22}
                    className={classNames("__wab_instance", sty.editText22)}
                    endIcon={null}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText22",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      (async event => {
                        const $steps = {};

                        $steps["updateText223"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["text223"]
                                },
                                operation: 0,
                                value: $state.editText22.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateText223"] != null &&
                          typeof $steps["updateText223"] === "object" &&
                          typeof $steps["updateText223"].then === "function"
                        ) {
                          $steps["updateText223"] = await $steps[
                            "updateText223"
                          ];
                        }

                        $steps["postgresUpdateById"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                  opId: "7b403b9a-9f37-45fb-b300-5742d341b2df",
                                  userArgs: {
                                    variables: [$state.editText22.value],
                                    keys: [$queries.pages.data[0].cms]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateById"] != null &&
                          typeof $steps["postgresUpdateById"] === "object" &&
                          typeof $steps["postgresUpdateById"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateById"] = await $steps[
                            "postgresUpdateById"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={(() => {
                      try {
                        return $state.text22 || $queries?.cms?.data[0]?.text_22;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    startIcon={null}
                    value={
                      generateStateValueProp($state, ["editText22", "value"]) ??
                      ""
                    }
                  />
                }
                editEnabled={(() => {
                  try {
                    return $props.editable == "true";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
              >
                {(() => {
                  try {
                    return $queries?.cms?.data[0]?.text_22 != null;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicLink__
                    data-plasmic-name={"text222"}
                    data-plasmic-override={overrides.text222}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.text222
                    )}
                    component={Link}
                    href={(() => {
                      try {
                        return $queries?.cms?.data[0]?.article_click_url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    platform={"nextjs"}
                  >
                    <React.Fragment>
                      {$state.text22 || $queries?.cms?.data[0]?.text_22}
                    </React.Fragment>
                  </PlasmicLink__>
                ) : null}
              </Editable>
              <div className={classNames(projectcss.all, sty.freeBox___9Gma4)}>
                {(() => {
                  try {
                    return $queries?.cms?.data[0]?.text_3 != null;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"cta2"}
                    data-plasmic-override={overrides.cta2}
                    className={classNames(projectcss.all, sty.cta2)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return $ctx?.fetchedData?.records[0]?.fields[
                                    "Step 2 URL"
                                  ];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                  >
                    <Editable
                      data-plasmic-name={"cta4"}
                      data-plasmic-override={overrides.cta4}
                      className={classNames("__wab_instance", sty.cta4)}
                      edit2={
                        <TextInput
                          data-plasmic-name={"editText32"}
                          data-plasmic-override={overrides.editText32}
                          className={classNames(
                            "__wab_instance",
                            sty.editText32
                          )}
                          endIcon={null}
                          onChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "editText32",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};

                              $steps["updateText3"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["text3"]
                                      },
                                      operation: 0,
                                      value: $state.editText32.value
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateText3"] != null &&
                                typeof $steps["updateText3"] === "object" &&
                                typeof $steps["updateText3"].then === "function"
                              ) {
                                $steps["updateText3"] = await $steps[
                                  "updateText3"
                                ];
                              }

                              $steps["postgresUpdateById"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                        opId: "29cb668e-33fc-4f74-852e-949aeee9fff5",
                                        userArgs: {
                                          variables: [$state.editText32.value],
                                          keys: [$queries.pages.data[0].cms]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["postgresUpdateById"] != null &&
                                typeof $steps["postgresUpdateById"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById"] = await $steps[
                                  "postgresUpdateById"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }}
                          placeholder={(() => {
                            try {
                              return (
                                $state.text3 || $queries?.cms?.data[0]?.text_3
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          startIcon={null}
                          value={
                            generateStateValueProp($state, [
                              "editText32",
                              "value"
                            ]) ?? ""
                          }
                        />
                      }
                      editEnabled={(() => {
                        try {
                          return $props.editable == "true";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                    >
                      <div
                        data-plasmic-name={"text33"}
                        data-plasmic-override={overrides.text33}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text33
                        )}
                      >
                        <React.Fragment>
                          {$state.text3 || $queries?.cms?.data[0]?.text_3}
                        </React.Fragment>
                      </div>
                    </Editable>
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return (
                            $queries?.cms?.data[0]?.text_20 != null &&
                            $queries?.cms?.data[0]?.text_21 != null
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return (
                            $queries?.cms?.data[0]?.text_20 != null &&
                            $queries?.cms?.data[0]?.text_21 != null
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bsa4E)}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return (
                            $queries?.cms?.data[0]?.text_20 != null &&
                            $queries?.cms?.data[0]?.text_21 != null
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return (
                            $queries?.cms?.data[0]?.text_20 != null &&
                            $queries?.cms?.data[0]?.text_21 != null
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jzJiC)}
                  >
                    <Editable
                      data-plasmic-name={"outroHeadline2"}
                      data-plasmic-override={overrides.outroHeadline2}
                      className={classNames(
                        "__wab_instance",
                        sty.outroHeadline2
                      )}
                      edit2={
                        <TextInput
                          data-plasmic-name={"editText20"}
                          data-plasmic-override={overrides.editText20}
                          className={classNames(
                            "__wab_instance",
                            sty.editText20
                          )}
                          endIcon={null}
                          onChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "editText20",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};

                              $steps["updateText20"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["text20"]
                                      },
                                      operation: 0,
                                      value: $state.editText20.value
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateText20"] != null &&
                                typeof $steps["updateText20"] === "object" &&
                                typeof $steps["updateText20"].then ===
                                  "function"
                              ) {
                                $steps["updateText20"] = await $steps[
                                  "updateText20"
                                ];
                              }

                              $steps["postgresUpdateById"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                        opId: "7d8be164-5689-41c2-b92d-835083901063",
                                        userArgs: {
                                          keys: [$queries.pages.data[0].cms],
                                          variables: [$state.editText20.value]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["postgresUpdateById"] != null &&
                                typeof $steps["postgresUpdateById"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById"] = await $steps[
                                  "postgresUpdateById"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }}
                          placeholder={(() => {
                            try {
                              return (
                                $state.text20 || $queries?.cms?.data[0]?.text_20
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          startIcon={null}
                          value={
                            generateStateValueProp($state, [
                              "editText20",
                              "value"
                            ]) ?? ""
                          }
                        />
                      }
                      editEnabled={(() => {
                        try {
                          return $props.editable == "true";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                    >
                      <div
                        data-plasmic-name={"text202"}
                        data-plasmic-override={overrides.text202}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text202
                        )}
                      >
                        <React.Fragment>
                          {$state.text20 || $queries?.cms?.data[0]?.text_20}
                        </React.Fragment>
                      </div>
                    </Editable>
                    <Editable
                      data-plasmic-name={"reviewStars"}
                      data-plasmic-override={overrides.reviewStars}
                      className={classNames("__wab_instance", sty.reviewStars)}
                      edit2={
                        <TextInput
                          data-plasmic-name={"editImage8"}
                          data-plasmic-override={overrides.editImage8}
                          className={classNames(
                            "__wab_instance",
                            sty.editImage8
                          )}
                          endIcon={null}
                          onChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "editImage8",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};

                              $steps["updateImage8"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["image8"]
                                      },
                                      operation: 0,
                                      value: $state.editImage8.value
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateImage8"] != null &&
                                typeof $steps["updateImage8"] === "object" &&
                                typeof $steps["updateImage8"].then ===
                                  "function"
                              ) {
                                $steps["updateImage8"] = await $steps[
                                  "updateImage8"
                                ];
                              }

                              $steps["postgresUpdateById"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                        opId: "6d29c6b8-408c-4686-bfff-d27ecdf82d58",
                                        userArgs: {
                                          variables: [$state.editImage8.value],
                                          keys: [$queries.pages.data[0].cms]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["postgresUpdateById"] != null &&
                                typeof $steps["postgresUpdateById"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById"] = await $steps[
                                  "postgresUpdateById"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }}
                          placeholder={(() => {
                            try {
                              return (
                                $state.image8 || $queries?.cms?.data[0]?.image_8
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          startIcon={null}
                          value={
                            generateStateValueProp($state, [
                              "editImage8",
                              "value"
                            ]) ?? ""
                          }
                        />
                      }
                      editEnabled={(() => {
                        try {
                          return $props.editable == "true";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                    >
                      {(() => {
                        try {
                          return $queries?.cms?.data[0]?.image_8 != null;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <PlasmicImg__
                          data-plasmic-name={"image82"}
                          data-plasmic-override={overrides.image82}
                          alt={""}
                          className={classNames(sty.image82)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "11px"
                              : "auto"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100px"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return (
                                $state.image8 || $queries?.cms?.data[0]?.image_8
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/legacy_feed_page_designs/images/starpng.png",
                                  fullWidth: 142,
                                  fullHeight: 21,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                        />
                      ) : null}
                    </Editable>
                    <Editable
                      data-plasmic-name={"outroHeadline3"}
                      data-plasmic-override={overrides.outroHeadline3}
                      className={classNames(
                        "__wab_instance",
                        sty.outroHeadline3
                      )}
                      edit2={
                        <TextInput
                          data-plasmic-name={"editText21"}
                          data-plasmic-override={overrides.editText21}
                          className={classNames(
                            "__wab_instance",
                            sty.editText21
                          )}
                          endIcon={null}
                          onChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "editText21",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }).apply(null, eventArgs);
                            (async event => {
                              const $steps = {};

                              $steps["updateText212"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["text212"]
                                      },
                                      operation: 0,
                                      value: $state.editText21.value
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateText212"] != null &&
                                typeof $steps["updateText212"] === "object" &&
                                typeof $steps["updateText212"].then ===
                                  "function"
                              ) {
                                $steps["updateText212"] = await $steps[
                                  "updateText212"
                                ];
                              }

                              $steps["postgresUpdateById"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                        opId: "568595d2-2628-41a0-a369-f82d90809aac",
                                        userArgs: {
                                          variables: [$state.editText21.value],
                                          keys: [$queries.pages.data[0].cms]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["postgresUpdateById"] != null &&
                                typeof $steps["postgresUpdateById"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById"] = await $steps[
                                  "postgresUpdateById"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }}
                          placeholder={(() => {
                            try {
                              return (
                                $state.text21 || $queries?.cms?.data[0]?.text_21
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          startIcon={null}
                          value={
                            generateStateValueProp($state, [
                              "editText21",
                              "value"
                            ]) ?? ""
                          }
                        />
                      }
                      editEnabled={(() => {
                        try {
                          return $props.editable == "true";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                    >
                      <div
                        data-plasmic-name={"text21"}
                        data-plasmic-override={overrides.text21}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text21
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $state.text21 || $queries?.cms?.data[0]?.text_21
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "sample";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Editable>
                  </div>
                ) : null}
              </div>
              {(() => {
                try {
                  return $queries?.cms?.data[0]?.image_9 != null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__lizP5
                  )}
                  component={Link}
                  href={(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields["Step 2 URL"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  platform={"nextjs"}
                >
                  <Editable
                    data-plasmic-name={"imageSeven"}
                    data-plasmic-override={overrides.imageSeven}
                    className={classNames("__wab_instance", sty.imageSeven)}
                    edit2={
                      <TextInput
                        data-plasmic-name={"editImage9"}
                        data-plasmic-override={overrides.editImage9}
                        className={classNames("__wab_instance", sty.editImage9)}
                        endIcon={null}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "editImage9",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }).apply(null, eventArgs);
                          (async event => {
                            const $steps = {};

                            $steps["updateImage9"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["image9"]
                                    },
                                    operation: 0,
                                    value: $state.editImage9.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateImage9"] != null &&
                              typeof $steps["updateImage9"] === "object" &&
                              typeof $steps["updateImage9"].then === "function"
                            ) {
                              $steps["updateImage9"] = await $steps[
                                "updateImage9"
                              ];
                            }

                            $steps["postgresUpdateById"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                      opId: "0d255bf1-df1e-4b1d-8b96-36aff73c7fef",
                                      userArgs: {
                                        variables: [$state.editImage9.value],
                                        keys: [$queries.pages.data[0].cms]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["postgresUpdateById"] != null &&
                              typeof $steps["postgresUpdateById"] ===
                                "object" &&
                              typeof $steps["postgresUpdateById"].then ===
                                "function"
                            ) {
                              $steps["postgresUpdateById"] = await $steps[
                                "postgresUpdateById"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                        placeholder={(() => {
                          try {
                            return (
                              $state.image9 || $queries?.cms?.data[0]?.image_9
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        startIcon={null}
                        value={
                          generateStateValueProp($state, [
                            "editImage9",
                            "value"
                          ]) ?? ""
                        }
                      />
                    }
                    editEnabled={(() => {
                      try {
                        return $props.editable == "true";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"image92"}
                      data-plasmic-override={overrides.image92}
                      alt={""}
                      className={classNames(sty.image92)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"eager"}
                      src={$state.image9 || $queries?.cms?.data[0]?.image_9}
                    />
                  </Editable>
                </PlasmicLink__>
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ivLgB)}>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__qh8Sa,
                  "block1"
                )}
                id={"review1"}
              >
                <Editable
                  className={classNames("__wab_instance", sty.editable__eEsIy)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editImage10"}
                      data-plasmic-override={overrides.editImage10}
                      className={classNames("__wab_instance", sty.editImage10)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editImage10",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateImage10"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["image10"]
                                  },
                                  operation: 0,
                                  value: $state.editImage10.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateImage10"] != null &&
                            typeof $steps["updateImage10"] === "object" &&
                            typeof $steps["updateImage10"].then === "function"
                          ) {
                            $steps["updateImage10"] = await $steps[
                              "updateImage10"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                    opId: "45498810-520f-4d59-bb1c-967686da01a3",
                                    userArgs: {
                                      variables: [$state.editImage10.value],
                                      keys: [$queries.pages.data[0].cms]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editImage10",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <PlasmicImg__
                    data-plasmic-name={"image102"}
                    data-plasmic-override={overrides.image102}
                    alt={""}
                    className={classNames(sty.image102)}
                    displayHeight={"100px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100px"}
                    loading={"lazy"}
                    src={$state.image10 || $queries?.cms?.data[0]?.image_10}
                  />
                </Editable>
                <Editable
                  className={classNames("__wab_instance", sty.editable__t3PPh)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText11"}
                      data-plasmic-override={overrides.editText11}
                      className={classNames("__wab_instance", sty.editText11)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editText11",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateText11"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["text11"]
                                  },
                                  operation: 0,
                                  value: $state.editText11.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateText11"] != null &&
                            typeof $steps["updateText11"] === "object" &&
                            typeof $steps["updateText11"].then === "function"
                          ) {
                            $steps["updateText11"] = await $steps[
                              "updateText11"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                    opId: "c33b2385-ee4f-4d5d-93f7-1d6f4fd0cfa3",
                                    userArgs: {
                                      variables: [$state.editText11.value],
                                      keys: [$queries.pages.data[0].cms]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={`Enter something…${
                        $state.text11 || $queries.cms?.data[0]?.text_11
                      }`}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText11",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    data-plasmic-name={"text112"}
                    data-plasmic-override={overrides.text112}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text112
                    )}
                  >
                    <React.Fragment>
                      {$state.text11 || $queries.cms?.data[0]?.text_11}
                    </React.Fragment>
                  </div>
                </Editable>
                <Editable
                  className={classNames("__wab_instance", sty.editable__nYiwg)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editImage8A"}
                      data-plasmic-override={overrides.editImage8A}
                      className={classNames("__wab_instance", sty.editImage8A)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editImage8A",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateImage8"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["image8"]
                                  },
                                  operation: 0,
                                  value: $state.editImage8A.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateImage8"] != null &&
                            typeof $steps["updateImage8"] === "object" &&
                            typeof $steps["updateImage8"].then === "function"
                          ) {
                            $steps["updateImage8"] = await $steps[
                              "updateImage8"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                    opId: "6d29c6b8-408c-4686-bfff-d27ecdf82d58",
                                    userArgs: {
                                      variables: [$state.editImage8A.value],
                                      keys: [$queries.pages.data[0].cms]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.image8 || $queries?.cms?.data[0]?.image_8
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editImage8A",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  {(() => {
                    try {
                      return $queries?.cms?.data[0]?.image_8 != null;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"image84"}
                      data-plasmic-override={overrides.image84}
                      alt={""}
                      className={classNames(sty.image84)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "11px"
                          : "auto"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100px"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return (
                            $state.image8 || $queries?.cms?.data[0]?.image_8
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/legacy_feed_page_designs/images/starpng.png",
                              fullWidth: 142,
                              fullHeight: 21,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()}
                    />
                  ) : null}
                </Editable>
                <Editable
                  data-plasmic-name={"review1PrimaryHeadline"}
                  data-plasmic-override={overrides.review1PrimaryHeadline}
                  className={classNames(
                    "__wab_instance",
                    sty.review1PrimaryHeadline
                  )}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText12"}
                      data-plasmic-override={overrides.editText12}
                      className={classNames("__wab_instance", sty.editText12)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editText12",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateText12"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["text12"]
                                  },
                                  operation: 0,
                                  value: $state.editText12.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateText12"] != null &&
                            typeof $steps["updateText12"] === "object" &&
                            typeof $steps["updateText12"].then === "function"
                          ) {
                            $steps["updateText12"] = await $steps[
                              "updateText12"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                    opId: "49a17eec-1895-4e0c-81da-c516847b8a15",
                                    userArgs: {
                                      variables: [$state.editText12.value],
                                      keys: [$state.editText12.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.text12 || $queries.cms?.data[0]?.text_12
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText12",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    data-plasmic-name={"text122"}
                    data-plasmic-override={overrides.text122}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text122
                    )}
                  >
                    <React.Fragment>
                      {$state.text12 || $queries.cms?.data[0]?.text_12}
                    </React.Fragment>
                  </div>
                </Editable>
                <Editable
                  data-plasmic-name={"review1Body"}
                  data-plasmic-override={overrides.review1Body}
                  className={classNames("__wab_instance", sty.review1Body)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText13"}
                      data-plasmic-override={overrides.editText13}
                      className={classNames("__wab_instance", sty.editText13)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editText13",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateText13"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["text13"]
                                  },
                                  operation: 0,
                                  value: $state.editText13.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateText13"] != null &&
                            typeof $steps["updateText13"] === "object" &&
                            typeof $steps["updateText13"].then === "function"
                          ) {
                            $steps["updateText13"] = await $steps[
                              "updateText13"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                    opId: "cbadba63-311b-4d41-93bd-700939423f7b",
                                    userArgs: {
                                      variables: [$state.editText13.value],
                                      keys: [$queries.pages.data[0].cms]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.text13 || $queries.cms?.data[0]?.text_13
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText13",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    data-plasmic-name={"text132"}
                    data-plasmic-override={overrides.text132}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text132
                    )}
                  >
                    <React.Fragment>
                      {$state.text13 || $queries.cms?.data[0]?.text_13}
                    </React.Fragment>
                  </div>
                </Editable>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__c3Rvi)}>
                <Editable
                  className={classNames("__wab_instance", sty.editable__hQu3)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editImage11"}
                      data-plasmic-override={overrides.editImage11}
                      className={classNames("__wab_instance", sty.editImage11)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editImage11",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateImage112"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["image112"]
                                  },
                                  operation: 0,
                                  value: $state.editImage11.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateImage112"] != null &&
                            typeof $steps["updateImage112"] === "object" &&
                            typeof $steps["updateImage112"].then === "function"
                          ) {
                            $steps["updateImage112"] = await $steps[
                              "updateImage112"
                            ];
                          }

                          $steps["postgresUpdateById2"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                    opId: "d1531a01-9273-4ce3-b3af-f64bb77a3a6c",
                                    userArgs: {
                                      variables: [$state.editImage11.value],
                                      keys: [$queries.pages.data[0].cms]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById2"] != null &&
                            typeof $steps["postgresUpdateById2"] === "object" &&
                            typeof $steps["postgresUpdateById2"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById2"] = await $steps[
                              "postgresUpdateById2"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editImage11",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  <PlasmicImg__
                    data-plasmic-name={"image11"}
                    data-plasmic-override={overrides.image11}
                    alt={""}
                    className={classNames(sty.image11)}
                    displayHeight={"100px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100px"}
                    loading={"lazy"}
                    src={$state.image11 || $queries?.cms?.data[0]?.image_11}
                  />
                </Editable>
                <Editable
                  className={classNames("__wab_instance", sty.editable__muVo7)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText14"}
                      data-plasmic-override={overrides.editText14}
                      className={classNames("__wab_instance", sty.editText14)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editText14",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateText14"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["text14"]
                                  },
                                  operation: 0,
                                  value: $state.editText14.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateText14"] != null &&
                            typeof $steps["updateText14"] === "object" &&
                            typeof $steps["updateText14"].then === "function"
                          ) {
                            $steps["updateText14"] = await $steps[
                              "updateText14"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                    opId: "96307a4c-aa98-46b4-85a0-b6974118dc0b",
                                    userArgs: {
                                      variables: [$state.editText14.value],
                                      keys: [$queries.pages.data[0].cms]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText14",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    data-plasmic-name={"text142"}
                    data-plasmic-override={overrides.text142}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text142
                    )}
                  >
                    <React.Fragment>
                      {$state.text14 || $queries.cms?.data[0]?.text_14}
                    </React.Fragment>
                  </div>
                </Editable>
                <Editable
                  className={classNames("__wab_instance", sty.editable__a6Gac)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editImage8B"}
                      data-plasmic-override={overrides.editImage8B}
                      className={classNames("__wab_instance", sty.editImage8B)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editImage8B",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateImage8"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["image8"]
                                  },
                                  operation: 0,
                                  value: $state.editImage8B.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateImage8"] != null &&
                            typeof $steps["updateImage8"] === "object" &&
                            typeof $steps["updateImage8"].then === "function"
                          ) {
                            $steps["updateImage8"] = await $steps[
                              "updateImage8"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                    opId: "6d29c6b8-408c-4686-bfff-d27ecdf82d58",
                                    userArgs: {
                                      variables: [$state.editImage8B.value],
                                      keys: [$queries.pages.data[0].cms]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.image8 || $queries?.cms?.data[0]?.image_8
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editImage8B",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  {(() => {
                    try {
                      return $queries?.cms?.data[0]?.image_8 != null;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"image86"}
                      data-plasmic-override={overrides.image86}
                      alt={""}
                      className={classNames(sty.image86)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "11px"
                          : "auto"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100px"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return (
                            $state.image8 || $queries?.cms?.data[0]?.image_8
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/legacy_feed_page_designs/images/starpng.png",
                              fullWidth: 142,
                              fullHeight: 21,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()}
                    />
                  ) : null}
                </Editable>
                <Editable
                  data-plasmic-name={"review2PrimaryHeadline"}
                  data-plasmic-override={overrides.review2PrimaryHeadline}
                  className={classNames(
                    "__wab_instance",
                    sty.review2PrimaryHeadline
                  )}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText15"}
                      data-plasmic-override={overrides.editText15}
                      className={classNames("__wab_instance", sty.editText15)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editText15",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateText15"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["text15"]
                                  },
                                  operation: 0,
                                  value: $state.editText15.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateText15"] != null &&
                            typeof $steps["updateText15"] === "object" &&
                            typeof $steps["updateText15"].then === "function"
                          ) {
                            $steps["updateText15"] = await $steps[
                              "updateText15"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                    opId: "56d2fcb7-492a-4022-a138-0dbbfb6bcd52",
                                    userArgs: {
                                      variables: [$state.editText15.value],
                                      keys: [$queries.pages.data[0].cms]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.text15 || $queries.cms?.data[0]?.text_15
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText15",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    data-plasmic-name={"text152"}
                    data-plasmic-override={overrides.text152}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text152
                    )}
                  >
                    <React.Fragment>
                      {$state.text15 || $queries.cms?.data[0]?.text_15}
                    </React.Fragment>
                  </div>
                </Editable>
                <Editable
                  data-plasmic-name={"review2Body"}
                  data-plasmic-override={overrides.review2Body}
                  className={classNames("__wab_instance", sty.review2Body)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText16"}
                      data-plasmic-override={overrides.editText16}
                      className={classNames("__wab_instance", sty.editText16)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editText16",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateText16"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["text16"]
                                  },
                                  operation: 0,
                                  value: $state.editText16.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateText16"] != null &&
                            typeof $steps["updateText16"] === "object" &&
                            typeof $steps["updateText16"].then === "function"
                          ) {
                            $steps["updateText16"] = await $steps[
                              "updateText16"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                    opId: "93f1ca5e-371c-4777-aea0-c1ef099cc6cc",
                                    userArgs: {
                                      variables: [$state.editText16.value],
                                      keys: [$state.editText16.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.text16 || $queries.cms?.data[0]?.text_16
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText16",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    data-plasmic-name={"text162"}
                    data-plasmic-override={overrides.text162}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text162
                    )}
                  >
                    <React.Fragment>
                      {$state.text16 || $queries.cms?.data[0]?.text_16}
                    </React.Fragment>
                  </div>
                </Editable>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__weuok)}>
                <Editable
                  className={classNames("__wab_instance", sty.editable__vfppe)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editImage12"}
                      data-plasmic-override={overrides.editImage12}
                      className={classNames("__wab_instance", sty.editImage12)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editImage12",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateImage123"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["image123"]
                                  },
                                  operation: 0,
                                  value: $state.editImage12.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateImage123"] != null &&
                            typeof $steps["updateImage123"] === "object" &&
                            typeof $steps["updateImage123"].then === "function"
                          ) {
                            $steps["updateImage123"] = await $steps[
                              "updateImage123"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                    opId: "545f1031-a79d-4fee-bcf6-f1330ba4e159",
                                    userArgs: {
                                      variables: [$state.editImage12.value],
                                      keys: [$queries.pages.data[0].cms]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editImage12",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  <PlasmicImg__
                    data-plasmic-name={"image122"}
                    data-plasmic-override={overrides.image122}
                    alt={""}
                    className={classNames(sty.image122)}
                    displayHeight={"100px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100px"}
                    loading={"lazy"}
                    src={$state.image12 || $queries?.cms?.data[0]?.image_12}
                  />
                </Editable>
                <Editable
                  className={classNames("__wab_instance", sty.editable___4KLIb)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText17"}
                      data-plasmic-override={overrides.editText17}
                      className={classNames("__wab_instance", sty.editText17)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editText17",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateText17"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["text17"]
                                  },
                                  operation: 0,
                                  value: $state.editText17.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateText17"] != null &&
                            typeof $steps["updateText17"] === "object" &&
                            typeof $steps["updateText17"].then === "function"
                          ) {
                            $steps["updateText17"] = await $steps[
                              "updateText17"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                    opId: "a8bab0ba-d370-47f4-8746-663237d6f851",
                                    userArgs: {
                                      variables: [$state.editText17.value],
                                      keys: [$queries.pages.data[0].cms]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={`Enter something…${
                        $state.text17 || $queries.cms?.data[0]?.text_17
                      }`}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText17",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    data-plasmic-name={"text172"}
                    data-plasmic-override={overrides.text172}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text172
                    )}
                  >
                    <React.Fragment>
                      {$state.text17 || $queries.cms?.data[0]?.text_17}
                    </React.Fragment>
                  </div>
                </Editable>
                <Editable
                  className={classNames("__wab_instance", sty.editable__xX2L)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editImage8C"}
                      data-plasmic-override={overrides.editImage8C}
                      className={classNames("__wab_instance", sty.editImage8C)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editImage8C",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateImage8"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["image8"]
                                  },
                                  operation: 0,
                                  value: $state.editImage8C.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateImage8"] != null &&
                            typeof $steps["updateImage8"] === "object" &&
                            typeof $steps["updateImage8"].then === "function"
                          ) {
                            $steps["updateImage8"] = await $steps[
                              "updateImage8"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                    opId: "6d29c6b8-408c-4686-bfff-d27ecdf82d58",
                                    userArgs: {
                                      variables: [$state.editImage8C.value],
                                      keys: [$queries.pages.data[0].cms]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.image8 || $queries?.cms?.data[0]?.image_8
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editImage8C",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  {(() => {
                    try {
                      return $queries?.cms?.data[0]?.image_8 != null;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      data-plasmic-name={"image83"}
                      data-plasmic-override={overrides.image83}
                      alt={""}
                      className={classNames(sty.image83)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "11px"
                          : "auto"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100px"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return (
                            $state.image8 || $queries?.cms?.data[0]?.image_8
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/legacy_feed_page_designs/images/starpng.png",
                              fullWidth: 142,
                              fullHeight: 21,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()}
                    />
                  ) : null}
                </Editable>
                <Editable
                  data-plasmic-name={"review3PrimaryHeadline"}
                  data-plasmic-override={overrides.review3PrimaryHeadline}
                  className={classNames(
                    "__wab_instance",
                    sty.review3PrimaryHeadline
                  )}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText18"}
                      data-plasmic-override={overrides.editText18}
                      className={classNames("__wab_instance", sty.editText18)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editText18",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateText18"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["text18"]
                                  },
                                  operation: 0,
                                  value: $state.editText18.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateText18"] != null &&
                            typeof $steps["updateText18"] === "object" &&
                            typeof $steps["updateText18"].then === "function"
                          ) {
                            $steps["updateText18"] = await $steps[
                              "updateText18"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                    opId: "95ba7f2f-887e-48d2-8409-194180c7a0a2",
                                    userArgs: {
                                      variables: [$state.editText18.value],
                                      keys: [$queries.pages.data[0].cms]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.text18 || $queries.cms?.data[0]?.text_18
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText18",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    data-plasmic-name={"text182"}
                    data-plasmic-override={overrides.text182}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text182
                    )}
                  >
                    <React.Fragment>
                      {$state.text18 || $queries.cms?.data[0]?.text_18}
                    </React.Fragment>
                  </div>
                </Editable>
                <Editable
                  data-plasmic-name={"review3Body"}
                  data-plasmic-override={overrides.review3Body}
                  className={classNames("__wab_instance", sty.review3Body)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText19"}
                      data-plasmic-override={overrides.editText19}
                      className={classNames("__wab_instance", sty.editText19)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editText19",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateText19"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["text19"]
                                  },
                                  operation: 0,
                                  value: $state.editText19.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateText19"] != null &&
                            typeof $steps["updateText19"] === "object" &&
                            typeof $steps["updateText19"].then === "function"
                          ) {
                            $steps["updateText19"] = await $steps[
                              "updateText19"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "jhyRJR71TBt7ca5EZWznEH",
                                    opId: "7d888fa7-a861-48be-bcc9-b0e23e28bdbd",
                                    userArgs: {
                                      keys: [$state.editText19.value],
                                      variables: [$state.editText19.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.text19 || $queries.cms?.data[0]?.text_19
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText19",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    data-plasmic-name={"text192"}
                    data-plasmic-override={overrides.text192}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text192
                    )}
                  >
                    <React.Fragment>
                      {$state.text19 || $queries.cms?.data[0]?.text_19}
                    </React.Fragment>
                  </div>
                </Editable>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vhfna)}>
                <PlasmicImg__
                  data-plasmic-name={"reviewIcon6"}
                  data-plasmic-override={overrides.reviewIcon6}
                  alt={""}
                  className={classNames(sty.reviewIcon6)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100px"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.review_icon[0]
                        .url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return {
                          src: "/plasmic/legacy_feed_page_designs/images/starpng.png",
                          fullWidth: 142,
                          fullHeight: 21,
                          aspectRatio: undefined
                        };
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  data-plasmic-name={"reviewStatement"}
                  data-plasmic-override={overrides.reviewStatement}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.reviewStatement
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields
                          .review_statement;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"ctaCardH1"}
                  data-plasmic-override={overrides.ctaCardH1}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.ctaCardH1
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.cta_card_h1;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "So What Are You Waiting For?";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"ctaCardH2"}
                  data-plasmic-override={overrides.ctaCardH2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.ctaCardH2
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.records[0].fields.cta_card_h2;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Take the first and easiest step towards quitting and receive 15% OFF your first purchase";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <PlasmicLink__
                  data-plasmic-name={"aCta3"}
                  data-plasmic-override={overrides.aCta3}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.aCta3
                  )}
                  component={Link}
                  href={(() => {
                    try {
                      return $ctx.fetchedData.records[0].fields.aCTA;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["setVariable"] = true
                      ? (() => {
                          const actionArgs = {};
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            undefined;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["setVariable"] != null &&
                      typeof $steps["setVariable"] === "object" &&
                      typeof $steps["setVariable"].then === "function"
                    ) {
                      $steps["setVariable"] = await $steps["setVariable"];
                    }
                  }}
                  platform={"nextjs"}
                >
                  {renderPlasmicSlot({
                    defaultContents: (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $ctx.fetchedData.records[0].fields.aCTA;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "CLAIM FREE DEVICE 👉";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ),
                    value: args.slot9,
                    className: classNames(sty.slotTargetSlot9)
                  })}
                </PlasmicLink__>
              </div>
            </div>
          </div>
        </div>
      ) : null}
      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml)}
        code={(() => {
          try {
            return $ctx.fetchedData.records[0].fields[
              "scripts (from Brands)"
            ][0];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "nav",
    "columns",
    "logo3",
    "logo",
    "editLogo",
    "slogan",
    "text110",
    "editText1",
    "intro",
    "heroHeadline",
    "text22",
    "editText2",
    "heroSubHeadline2",
    "heroSubHeadline",
    "editText4",
    "cta",
    "cta3",
    "text32",
    "editText3",
    "reviewIcon2",
    "reviewStatement2",
    "body",
    "articleBody",
    "press",
    "pressIcon",
    "imageOne",
    "image12",
    "editImage1",
    "paragraphOne",
    "text52",
    "editText5",
    "h21",
    "imageTwo",
    "image22",
    "editImage2",
    "paragraphTwo",
    "text62",
    "editText6",
    "h22",
    "imageThree",
    "image32",
    "editImage3",
    "paragraphThree",
    "text72",
    "editText7",
    "h23",
    "imageFour",
    "image42",
    "editImage4",
    "paragraphFour",
    "text82",
    "editText8",
    "h24",
    "review1",
    "paragraph42",
    "paragraph43",
    "paragraph44",
    "review2",
    "paragraph45",
    "paragraph46",
    "paragraph47",
    "review3",
    "paragraph48",
    "paragraph49",
    "paragraph410",
    "h25",
    "h35",
    "offer2",
    "offerH2",
    "offerParagraph",
    "imageFive",
    "image52",
    "editImage5",
    "paragraphFive",
    "text92",
    "editText9",
    "h26",
    "imageSix",
    "image62",
    "editImage6",
    "paragraphSix",
    "text102",
    "editText10",
    "h27",
    "image7",
    "outroHeadline1",
    "text222",
    "editText22",
    "cta2",
    "cta4",
    "text33",
    "editText32",
    "outroHeadline2",
    "text202",
    "editText20",
    "reviewStars",
    "image82",
    "editImage8",
    "outroHeadline3",
    "text21",
    "editText21",
    "imageSeven",
    "image92",
    "editImage9",
    "image102",
    "editImage10",
    "text112",
    "editText11",
    "image84",
    "editImage8A",
    "review1PrimaryHeadline",
    "text122",
    "editText12",
    "review1Body",
    "text132",
    "editText13",
    "image11",
    "editImage11",
    "text142",
    "editText14",
    "image86",
    "editImage8B",
    "review2PrimaryHeadline",
    "text152",
    "editText15",
    "review2Body",
    "text162",
    "editText16",
    "image122",
    "editImage12",
    "text172",
    "editText17",
    "image83",
    "editImage8C",
    "review3PrimaryHeadline",
    "text182",
    "editText18",
    "review3Body",
    "text192",
    "editText19",
    "reviewIcon6",
    "reviewStatement",
    "ctaCardH1",
    "ctaCardH2",
    "aCta3",
    "embedHtml"
  ],
  nav: [
    "nav",
    "columns",
    "logo3",
    "logo",
    "editLogo",
    "slogan",
    "text110",
    "editText1"
  ],
  columns: [
    "columns",
    "logo3",
    "logo",
    "editLogo",
    "slogan",
    "text110",
    "editText1"
  ],
  logo3: ["logo3", "logo", "editLogo"],
  logo: ["logo"],
  editLogo: ["editLogo"],
  slogan: ["slogan", "text110", "editText1"],
  text110: ["text110"],
  editText1: ["editText1"],
  intro: [
    "intro",
    "heroHeadline",
    "text22",
    "editText2",
    "heroSubHeadline2",
    "heroSubHeadline",
    "editText4",
    "cta",
    "cta3",
    "text32",
    "editText3",
    "reviewIcon2",
    "reviewStatement2"
  ],
  heroHeadline: ["heroHeadline", "text22", "editText2"],
  text22: ["text22"],
  editText2: ["editText2"],
  heroSubHeadline2: ["heroSubHeadline2", "heroSubHeadline", "editText4"],
  heroSubHeadline: ["heroSubHeadline"],
  editText4: ["editText4"],
  cta: ["cta", "cta3", "text32", "editText3"],
  cta3: ["cta3", "text32", "editText3"],
  text32: ["text32"],
  editText3: ["editText3"],
  reviewIcon2: ["reviewIcon2"],
  reviewStatement2: ["reviewStatement2"],
  body: [
    "body",
    "articleBody",
    "press",
    "pressIcon",
    "imageOne",
    "image12",
    "editImage1",
    "paragraphOne",
    "text52",
    "editText5",
    "h21",
    "imageTwo",
    "image22",
    "editImage2",
    "paragraphTwo",
    "text62",
    "editText6",
    "h22",
    "imageThree",
    "image32",
    "editImage3",
    "paragraphThree",
    "text72",
    "editText7",
    "h23",
    "imageFour",
    "image42",
    "editImage4",
    "paragraphFour",
    "text82",
    "editText8",
    "h24",
    "review1",
    "paragraph42",
    "paragraph43",
    "paragraph44",
    "review2",
    "paragraph45",
    "paragraph46",
    "paragraph47",
    "review3",
    "paragraph48",
    "paragraph49",
    "paragraph410",
    "h25",
    "h35",
    "offer2",
    "offerH2",
    "offerParagraph",
    "imageFive",
    "image52",
    "editImage5",
    "paragraphFive",
    "text92",
    "editText9",
    "h26",
    "imageSix",
    "image62",
    "editImage6",
    "paragraphSix",
    "text102",
    "editText10",
    "h27",
    "image7",
    "outroHeadline1",
    "text222",
    "editText22",
    "cta2",
    "cta4",
    "text33",
    "editText32",
    "outroHeadline2",
    "text202",
    "editText20",
    "reviewStars",
    "image82",
    "editImage8",
    "outroHeadline3",
    "text21",
    "editText21",
    "imageSeven",
    "image92",
    "editImage9",
    "image102",
    "editImage10",
    "text112",
    "editText11",
    "image84",
    "editImage8A",
    "review1PrimaryHeadline",
    "text122",
    "editText12",
    "review1Body",
    "text132",
    "editText13",
    "image11",
    "editImage11",
    "text142",
    "editText14",
    "image86",
    "editImage8B",
    "review2PrimaryHeadline",
    "text152",
    "editText15",
    "review2Body",
    "text162",
    "editText16",
    "image122",
    "editImage12",
    "text172",
    "editText17",
    "image83",
    "editImage8C",
    "review3PrimaryHeadline",
    "text182",
    "editText18",
    "review3Body",
    "text192",
    "editText19",
    "reviewIcon6",
    "reviewStatement",
    "ctaCardH1",
    "ctaCardH2",
    "aCta3"
  ],
  articleBody: [
    "articleBody",
    "press",
    "pressIcon",
    "imageOne",
    "image12",
    "editImage1",
    "paragraphOne",
    "text52",
    "editText5",
    "h21",
    "imageTwo",
    "image22",
    "editImage2",
    "paragraphTwo",
    "text62",
    "editText6",
    "h22",
    "imageThree",
    "image32",
    "editImage3",
    "paragraphThree",
    "text72",
    "editText7",
    "h23",
    "imageFour",
    "image42",
    "editImage4",
    "paragraphFour",
    "text82",
    "editText8",
    "h24",
    "review1",
    "paragraph42",
    "paragraph43",
    "paragraph44",
    "review2",
    "paragraph45",
    "paragraph46",
    "paragraph47",
    "review3",
    "paragraph48",
    "paragraph49",
    "paragraph410",
    "h25",
    "h35",
    "offer2",
    "offerH2",
    "offerParagraph",
    "imageFive",
    "image52",
    "editImage5",
    "paragraphFive",
    "text92",
    "editText9",
    "h26",
    "imageSix",
    "image62",
    "editImage6",
    "paragraphSix",
    "text102",
    "editText10",
    "h27",
    "image7",
    "outroHeadline1",
    "text222",
    "editText22",
    "cta2",
    "cta4",
    "text33",
    "editText32",
    "outroHeadline2",
    "text202",
    "editText20",
    "reviewStars",
    "image82",
    "editImage8",
    "outroHeadline3",
    "text21",
    "editText21",
    "imageSeven",
    "image92",
    "editImage9"
  ],
  press: ["press", "pressIcon"],
  pressIcon: ["pressIcon"],
  imageOne: ["imageOne", "image12", "editImage1"],
  image12: ["image12"],
  editImage1: ["editImage1"],
  paragraphOne: ["paragraphOne", "text52", "editText5"],
  text52: ["text52"],
  editText5: ["editText5"],
  h21: ["h21"],
  imageTwo: ["imageTwo", "image22", "editImage2"],
  image22: ["image22"],
  editImage2: ["editImage2"],
  paragraphTwo: ["paragraphTwo", "text62", "editText6"],
  text62: ["text62"],
  editText6: ["editText6"],
  h22: ["h22"],
  imageThree: ["imageThree", "image32", "editImage3"],
  image32: ["image32"],
  editImage3: ["editImage3"],
  paragraphThree: ["paragraphThree", "text72", "editText7"],
  text72: ["text72"],
  editText7: ["editText7"],
  h23: ["h23"],
  imageFour: ["imageFour", "image42", "editImage4"],
  image42: ["image42"],
  editImage4: ["editImage4"],
  paragraphFour: ["paragraphFour", "text82", "editText8"],
  text82: ["text82"],
  editText8: ["editText8"],
  h24: ["h24"],
  review1: ["review1", "paragraph42", "paragraph43", "paragraph44"],
  paragraph42: ["paragraph42"],
  paragraph43: ["paragraph43"],
  paragraph44: ["paragraph44"],
  review2: ["review2", "paragraph45", "paragraph46", "paragraph47"],
  paragraph45: ["paragraph45"],
  paragraph46: ["paragraph46"],
  paragraph47: ["paragraph47"],
  review3: ["review3", "paragraph48", "paragraph49", "paragraph410"],
  paragraph48: ["paragraph48"],
  paragraph49: ["paragraph49"],
  paragraph410: ["paragraph410"],
  h25: ["h25"],
  h35: ["h35"],
  offer2: ["offer2", "offerH2", "offerParagraph"],
  offerH2: ["offerH2"],
  offerParagraph: ["offerParagraph"],
  imageFive: ["imageFive", "image52", "editImage5"],
  image52: ["image52"],
  editImage5: ["editImage5"],
  paragraphFive: ["paragraphFive", "text92", "editText9"],
  text92: ["text92"],
  editText9: ["editText9"],
  h26: ["h26"],
  imageSix: ["imageSix", "image62", "editImage6"],
  image62: ["image62"],
  editImage6: ["editImage6"],
  paragraphSix: ["paragraphSix", "text102", "editText10"],
  text102: ["text102"],
  editText10: ["editText10"],
  h27: ["h27"],
  image7: ["image7"],
  outroHeadline1: ["outroHeadline1", "text222", "editText22"],
  text222: ["text222"],
  editText22: ["editText22"],
  cta2: ["cta2", "cta4", "text33", "editText32"],
  cta4: ["cta4", "text33", "editText32"],
  text33: ["text33"],
  editText32: ["editText32"],
  outroHeadline2: ["outroHeadline2", "text202", "editText20"],
  text202: ["text202"],
  editText20: ["editText20"],
  reviewStars: ["reviewStars", "image82", "editImage8"],
  image82: ["image82"],
  editImage8: ["editImage8"],
  outroHeadline3: ["outroHeadline3", "text21", "editText21"],
  text21: ["text21"],
  editText21: ["editText21"],
  imageSeven: ["imageSeven", "image92", "editImage9"],
  image92: ["image92"],
  editImage9: ["editImage9"],
  image102: ["image102"],
  editImage10: ["editImage10"],
  text112: ["text112"],
  editText11: ["editText11"],
  image84: ["image84"],
  editImage8A: ["editImage8A"],
  review1PrimaryHeadline: ["review1PrimaryHeadline", "text122", "editText12"],
  text122: ["text122"],
  editText12: ["editText12"],
  review1Body: ["review1Body", "text132", "editText13"],
  text132: ["text132"],
  editText13: ["editText13"],
  image11: ["image11"],
  editImage11: ["editImage11"],
  text142: ["text142"],
  editText14: ["editText14"],
  image86: ["image86"],
  editImage8B: ["editImage8B"],
  review2PrimaryHeadline: ["review2PrimaryHeadline", "text152", "editText15"],
  text152: ["text152"],
  editText15: ["editText15"],
  review2Body: ["review2Body", "text162", "editText16"],
  text162: ["text162"],
  editText16: ["editText16"],
  image122: ["image122"],
  editImage12: ["editImage12"],
  text172: ["text172"],
  editText17: ["editText17"],
  image83: ["image83"],
  editImage8C: ["editImage8C"],
  review3PrimaryHeadline: ["review3PrimaryHeadline", "text182", "editText18"],
  text182: ["text182"],
  editText18: ["editText18"],
  review3Body: ["review3Body", "text192", "editText19"],
  text192: ["text192"],
  editText19: ["editText19"],
  reviewIcon6: ["reviewIcon6"],
  reviewStatement: ["reviewStatement"],
  ctaCardH1: ["ctaCardH1"],
  ctaCardH2: ["ctaCardH2"],
  aCta3: ["aCta3"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  nav: "div";
  columns: "div";
  logo3: typeof Editable;
  logo: typeof PlasmicImg__;
  editLogo: typeof TextInput;
  slogan: typeof Editable;
  text110: "div";
  editText1: typeof TextInput;
  intro: "div";
  heroHeadline: typeof Editable;
  text22: "div";
  editText2: typeof TextInput;
  heroSubHeadline2: typeof Editable;
  heroSubHeadline: "div";
  editText4: typeof TextInput;
  cta: "div";
  cta3: typeof Editable;
  text32: "div";
  editText3: typeof TextInput;
  reviewIcon2: typeof PlasmicImg__;
  reviewStatement2: "div";
  body: "div";
  articleBody: "div";
  press: "div";
  pressIcon: typeof PlasmicImg__;
  imageOne: typeof Editable;
  image12: typeof PlasmicImg__;
  editImage1: typeof TextInput;
  paragraphOne: typeof Editable;
  text52: "div";
  editText5: typeof TextInput;
  h21: "div";
  imageTwo: typeof Editable;
  image22: typeof PlasmicImg__;
  editImage2: typeof TextInput;
  paragraphTwo: typeof Editable;
  text62: "div";
  editText6: typeof TextInput;
  h22: "div";
  imageThree: typeof Editable;
  image32: typeof PlasmicImg__;
  editImage3: typeof TextInput;
  paragraphThree: typeof Editable;
  text72: "div";
  editText7: typeof TextInput;
  h23: "div";
  imageFour: typeof Editable;
  image42: typeof PlasmicImg__;
  editImage4: typeof TextInput;
  paragraphFour: typeof Editable;
  text82: "div";
  editText8: typeof TextInput;
  h24: "div";
  review1: "div";
  paragraph42: "div";
  paragraph43: "div";
  paragraph44: "div";
  review2: "div";
  paragraph45: "div";
  paragraph46: "div";
  paragraph47: "div";
  review3: "div";
  paragraph48: "div";
  paragraph49: "div";
  paragraph410: "div";
  h25: "div";
  h35: "div";
  offer2: typeof Offer2;
  offerH2: "div";
  offerParagraph: "div";
  imageFive: typeof Editable;
  image52: typeof PlasmicImg__;
  editImage5: typeof TextInput;
  paragraphFive: typeof Editable;
  text92: "div";
  editText9: typeof TextInput;
  h26: "div";
  imageSix: typeof Editable;
  image62: typeof PlasmicImg__;
  editImage6: typeof TextInput;
  paragraphSix: typeof Editable;
  text102: "div";
  editText10: typeof TextInput;
  h27: "div";
  image7: typeof PlasmicImg__;
  outroHeadline1: typeof Editable;
  text222: "a";
  editText22: typeof TextInput;
  cta2: "div";
  cta4: typeof Editable;
  text33: "div";
  editText32: typeof TextInput;
  outroHeadline2: typeof Editable;
  text202: "div";
  editText20: typeof TextInput;
  reviewStars: typeof Editable;
  image82: typeof PlasmicImg__;
  editImage8: typeof TextInput;
  outroHeadline3: typeof Editable;
  text21: "div";
  editText21: typeof TextInput;
  imageSeven: typeof Editable;
  image92: typeof PlasmicImg__;
  editImage9: typeof TextInput;
  image102: typeof PlasmicImg__;
  editImage10: typeof TextInput;
  text112: "div";
  editText11: typeof TextInput;
  image84: typeof PlasmicImg__;
  editImage8A: typeof TextInput;
  review1PrimaryHeadline: typeof Editable;
  text122: "div";
  editText12: typeof TextInput;
  review1Body: typeof Editable;
  text132: "div";
  editText13: typeof TextInput;
  image11: typeof PlasmicImg__;
  editImage11: typeof TextInput;
  text142: "div";
  editText14: typeof TextInput;
  image86: typeof PlasmicImg__;
  editImage8B: typeof TextInput;
  review2PrimaryHeadline: typeof Editable;
  text152: "div";
  editText15: typeof TextInput;
  review2Body: typeof Editable;
  text162: "div";
  editText16: typeof TextInput;
  image122: typeof PlasmicImg__;
  editImage12: typeof TextInput;
  text172: "div";
  editText17: typeof TextInput;
  image83: typeof PlasmicImg__;
  editImage8C: typeof TextInput;
  review3PrimaryHeadline: typeof Editable;
  text182: "div";
  editText18: typeof TextInput;
  review3Body: typeof Editable;
  text192: "div";
  editText19: typeof TextInput;
  reviewIcon6: typeof PlasmicImg__;
  reviewStatement: "div";
  ctaCardH1: "div";
  ctaCardH2: "div";
  aCta3: "a";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdvertorial__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdvertorial__VariantsArgs;
    args?: PlasmicAdvertorial__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdvertorial__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdvertorial__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdvertorial__ArgProps,
          internalVariantPropNames: PlasmicAdvertorial__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdvertorial__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdvertorial";
  } else {
    func.displayName = `PlasmicAdvertorial.${nodeName}`;
  }
  return func;
}

export const PlasmicAdvertorial = Object.assign(
  // Top-level PlasmicAdvertorial renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    nav: makeNodeComponent("nav"),
    columns: makeNodeComponent("columns"),
    logo3: makeNodeComponent("logo3"),
    logo: makeNodeComponent("logo"),
    editLogo: makeNodeComponent("editLogo"),
    slogan: makeNodeComponent("slogan"),
    text110: makeNodeComponent("text110"),
    editText1: makeNodeComponent("editText1"),
    intro: makeNodeComponent("intro"),
    heroHeadline: makeNodeComponent("heroHeadline"),
    text22: makeNodeComponent("text22"),
    editText2: makeNodeComponent("editText2"),
    heroSubHeadline2: makeNodeComponent("heroSubHeadline2"),
    heroSubHeadline: makeNodeComponent("heroSubHeadline"),
    editText4: makeNodeComponent("editText4"),
    cta: makeNodeComponent("cta"),
    cta3: makeNodeComponent("cta3"),
    text32: makeNodeComponent("text32"),
    editText3: makeNodeComponent("editText3"),
    reviewIcon2: makeNodeComponent("reviewIcon2"),
    reviewStatement2: makeNodeComponent("reviewStatement2"),
    body: makeNodeComponent("body"),
    articleBody: makeNodeComponent("articleBody"),
    press: makeNodeComponent("press"),
    pressIcon: makeNodeComponent("pressIcon"),
    imageOne: makeNodeComponent("imageOne"),
    image12: makeNodeComponent("image12"),
    editImage1: makeNodeComponent("editImage1"),
    paragraphOne: makeNodeComponent("paragraphOne"),
    text52: makeNodeComponent("text52"),
    editText5: makeNodeComponent("editText5"),
    h21: makeNodeComponent("h21"),
    imageTwo: makeNodeComponent("imageTwo"),
    image22: makeNodeComponent("image22"),
    editImage2: makeNodeComponent("editImage2"),
    paragraphTwo: makeNodeComponent("paragraphTwo"),
    text62: makeNodeComponent("text62"),
    editText6: makeNodeComponent("editText6"),
    h22: makeNodeComponent("h22"),
    imageThree: makeNodeComponent("imageThree"),
    image32: makeNodeComponent("image32"),
    editImage3: makeNodeComponent("editImage3"),
    paragraphThree: makeNodeComponent("paragraphThree"),
    text72: makeNodeComponent("text72"),
    editText7: makeNodeComponent("editText7"),
    h23: makeNodeComponent("h23"),
    imageFour: makeNodeComponent("imageFour"),
    image42: makeNodeComponent("image42"),
    editImage4: makeNodeComponent("editImage4"),
    paragraphFour: makeNodeComponent("paragraphFour"),
    text82: makeNodeComponent("text82"),
    editText8: makeNodeComponent("editText8"),
    h24: makeNodeComponent("h24"),
    review1: makeNodeComponent("review1"),
    paragraph42: makeNodeComponent("paragraph42"),
    paragraph43: makeNodeComponent("paragraph43"),
    paragraph44: makeNodeComponent("paragraph44"),
    review2: makeNodeComponent("review2"),
    paragraph45: makeNodeComponent("paragraph45"),
    paragraph46: makeNodeComponent("paragraph46"),
    paragraph47: makeNodeComponent("paragraph47"),
    review3: makeNodeComponent("review3"),
    paragraph48: makeNodeComponent("paragraph48"),
    paragraph49: makeNodeComponent("paragraph49"),
    paragraph410: makeNodeComponent("paragraph410"),
    h25: makeNodeComponent("h25"),
    h35: makeNodeComponent("h35"),
    offer2: makeNodeComponent("offer2"),
    offerH2: makeNodeComponent("offerH2"),
    offerParagraph: makeNodeComponent("offerParagraph"),
    imageFive: makeNodeComponent("imageFive"),
    image52: makeNodeComponent("image52"),
    editImage5: makeNodeComponent("editImage5"),
    paragraphFive: makeNodeComponent("paragraphFive"),
    text92: makeNodeComponent("text92"),
    editText9: makeNodeComponent("editText9"),
    h26: makeNodeComponent("h26"),
    imageSix: makeNodeComponent("imageSix"),
    image62: makeNodeComponent("image62"),
    editImage6: makeNodeComponent("editImage6"),
    paragraphSix: makeNodeComponent("paragraphSix"),
    text102: makeNodeComponent("text102"),
    editText10: makeNodeComponent("editText10"),
    h27: makeNodeComponent("h27"),
    image7: makeNodeComponent("image7"),
    outroHeadline1: makeNodeComponent("outroHeadline1"),
    text222: makeNodeComponent("text222"),
    editText22: makeNodeComponent("editText22"),
    cta2: makeNodeComponent("cta2"),
    cta4: makeNodeComponent("cta4"),
    text33: makeNodeComponent("text33"),
    editText32: makeNodeComponent("editText32"),
    outroHeadline2: makeNodeComponent("outroHeadline2"),
    text202: makeNodeComponent("text202"),
    editText20: makeNodeComponent("editText20"),
    reviewStars: makeNodeComponent("reviewStars"),
    image82: makeNodeComponent("image82"),
    editImage8: makeNodeComponent("editImage8"),
    outroHeadline3: makeNodeComponent("outroHeadline3"),
    text21: makeNodeComponent("text21"),
    editText21: makeNodeComponent("editText21"),
    imageSeven: makeNodeComponent("imageSeven"),
    image92: makeNodeComponent("image92"),
    editImage9: makeNodeComponent("editImage9"),
    image102: makeNodeComponent("image102"),
    editImage10: makeNodeComponent("editImage10"),
    text112: makeNodeComponent("text112"),
    editText11: makeNodeComponent("editText11"),
    image84: makeNodeComponent("image84"),
    editImage8A: makeNodeComponent("editImage8A"),
    review1PrimaryHeadline: makeNodeComponent("review1PrimaryHeadline"),
    text122: makeNodeComponent("text122"),
    editText12: makeNodeComponent("editText12"),
    review1Body: makeNodeComponent("review1Body"),
    text132: makeNodeComponent("text132"),
    editText13: makeNodeComponent("editText13"),
    image11: makeNodeComponent("image11"),
    editImage11: makeNodeComponent("editImage11"),
    text142: makeNodeComponent("text142"),
    editText14: makeNodeComponent("editText14"),
    image86: makeNodeComponent("image86"),
    editImage8B: makeNodeComponent("editImage8B"),
    review2PrimaryHeadline: makeNodeComponent("review2PrimaryHeadline"),
    text152: makeNodeComponent("text152"),
    editText15: makeNodeComponent("editText15"),
    review2Body: makeNodeComponent("review2Body"),
    text162: makeNodeComponent("text162"),
    editText16: makeNodeComponent("editText16"),
    image122: makeNodeComponent("image122"),
    editImage12: makeNodeComponent("editImage12"),
    text172: makeNodeComponent("text172"),
    editText17: makeNodeComponent("editText17"),
    image83: makeNodeComponent("image83"),
    editImage8C: makeNodeComponent("editImage8C"),
    review3PrimaryHeadline: makeNodeComponent("review3PrimaryHeadline"),
    text182: makeNodeComponent("text182"),
    editText18: makeNodeComponent("editText18"),
    review3Body: makeNodeComponent("review3Body"),
    text192: makeNodeComponent("text192"),
    editText19: makeNodeComponent("editText19"),
    reviewIcon6: makeNodeComponent("reviewIcon6"),
    reviewStatement: makeNodeComponent("reviewStatement"),
    ctaCardH1: makeNodeComponent("ctaCardH1"),
    ctaCardH2: makeNodeComponent("ctaCardH2"),
    aCta3: makeNodeComponent("aCta3"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicAdvertorial
    internalVariantProps: PlasmicAdvertorial__VariantProps,
    internalArgProps: PlasmicAdvertorial__ArgProps
  }
);

export default PlasmicAdvertorial;
/* prettier-ignore-end */
