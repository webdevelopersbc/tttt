// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dMaiZmvKdpJ4pWYeCQn3zc
// Component: 36zHIesrkUC0Cd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariants_365VKlwMc2UpC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 365v_KlwMc2up-c/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_legacy_feed_page_designs.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import sty from "./PlasmicNavArticle1.module.css"; // plasmic-import: 36zHIesrkUC0Cd/css

createPlasmicElementProxy;

export type PlasmicNavArticle1__VariantMembers = {};
export type PlasmicNavArticle1__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavArticle1__VariantsArgs;
export const PlasmicNavArticle1__VariantProps = new Array<VariantPropType>();

export type PlasmicNavArticle1__ArgsType = {};
type ArgPropType = keyof PlasmicNavArticle1__ArgsType;
export const PlasmicNavArticle1__ArgProps = new Array<ArgPropType>();

export type PlasmicNavArticle1__OverridesType = {
  article1Nav?: Flex__<"div">;
  columns?: Flex__<"div">;
  text?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultNavArticle1Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavArticle1__RenderFunc(props: {
  variants: PlasmicNavArticle1__VariantsArgs;
  args: PlasmicNavArticle1__ArgsType;
  overrides: PlasmicNavArticle1__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_365VKlwMc2UpC()
  });

  return (
    <div
      data-plasmic-name={"article1Nav"}
      data-plasmic-override={overrides.article1Nav}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.article1Nav
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column___2Kb4Z)}>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            <React.Fragment>
              {$ctx.fetchDyanamicData.records[0].fields.aSlogan}
            </React.Fragment>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column__c8He5)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__brIZq
            )}
            component={Link}
            href={(() => {
              try {
                return $ctx.fetchDyanamicData.records[0].fields["Step 2 URL"];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            platform={"nextjs"}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"125px"}
              loading={"eager"}
              src={(() => {
                try {
                  return $ctx.fetchDyanamicData.records[0].fields.logo[0].url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          </PlasmicLink__>
        </div>
        <div className={classNames(projectcss.all, sty.column__cy7YX)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__jxt5Y
            )}
            component={Link}
            href={(() => {
              try {
                return $ctx.fetchDyanamicData.records[0].fields["Step 2 URL"];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            platform={"nextjs"}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $ctx.fetchDyanamicData.records[0].fields.aCTA;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "CLAIM FREE PODS";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </PlasmicLink__>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  article1Nav: ["article1Nav", "columns", "text", "img"],
  columns: ["columns", "text", "img"],
  text: ["text"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  article1Nav: "div";
  columns: "div";
  text: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavArticle1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavArticle1__VariantsArgs;
    args?: PlasmicNavArticle1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavArticle1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavArticle1__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavArticle1__ArgProps,
          internalVariantPropNames: PlasmicNavArticle1__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavArticle1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "article1Nav") {
    func.displayName = "PlasmicNavArticle1";
  } else {
    func.displayName = `PlasmicNavArticle1.${nodeName}`;
  }
  return func;
}

export const PlasmicNavArticle1 = Object.assign(
  // Top-level PlasmicNavArticle1 renders the root element
  makeNodeComponent("article1Nav"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    text: makeNodeComponent("text"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicNavArticle1
    internalVariantProps: PlasmicNavArticle1__VariantProps,
    internalArgProps: PlasmicNavArticle1__ArgProps
  }
);

export default PlasmicNavArticle1;
/* prettier-ignore-end */
