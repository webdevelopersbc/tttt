// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dMaiZmvKdpJ4pWYeCQn3zc
// Component: O7PFCbWrV7fl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import TextInput from "../../TextInput"; // plasmic-import: 3r4TxCxZZuIK5/component
import Button from "../../Button"; // plasmic-import: VGxgH9M5y5qbv/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariants_365VKlwMc2UpC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 365v_KlwMc2up-c/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_legacy_feed_page_designs.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import sty from "./PlasmicSqueezeVariant2.module.css"; // plasmic-import: O7PFCbWrV7fl/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: CRyUolhDoWvR1TU/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: JKXZQCGXOZJezuA/icon
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: 0VaJSqGZoQorJK1/icon
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: _YkWarl3TTR4_3w/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: 6rb7Dsdqa0siEyW/icon

createPlasmicElementProxy;

export type PlasmicSqueezeVariant2__VariantMembers = {};
export type PlasmicSqueezeVariant2__VariantsArgs = {};
type VariantPropType = keyof PlasmicSqueezeVariant2__VariantsArgs;
export const PlasmicSqueezeVariant2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSqueezeVariant2__ArgsType = {};
type ArgPropType = keyof PlasmicSqueezeVariant2__ArgsType;
export const PlasmicSqueezeVariant2__ArgProps = new Array<ArgPropType>();

export type PlasmicSqueezeVariant2__OverridesType = {
  root?: Flex__<"div">;
  desktop?: Flex__<"div">;
  logo?: Flex__<typeof PlasmicImg__>;
  squeezeNav?: Flex__<"div">;
  squeezeC1H1?: Flex__<"div">;
  squeezeC1H2?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  squeezeC1Cta?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  textInput2?: Flex__<typeof TextInput>;
  squeezeC1Disclaimer?: Flex__<"div">;
  squeezeC2Thumbnail?: Flex__<typeof PlasmicImg__>;
  squeezeC2H1?: Flex__<"div">;
  squeezeC2H12?: Flex__<"div">;
  iconValue1?: Flex__<"div">;
  squeezeC2Icon1?: Flex__<typeof PlasmicImg__>;
  squeezeC2Icon1Value1?: Flex__<"div">;
  iconValue2?: Flex__<"div">;
  squeezeC2Icon2?: Flex__<typeof PlasmicImg__>;
  squeezeC2Icon1Value2?: Flex__<"div">;
  iconValue3?: Flex__<"div">;
  squeezeC2Icon3?: Flex__<typeof PlasmicImg__>;
  squeezeC2Icon1Value3?: Flex__<"div">;
  squeezeC2CtaH1?: Flex__<"div">;
  squeezeC2CtaH2?: Flex__<"div">;
  squeezeC2Proof?: Flex__<"div">;
  squeezeC2OfferH1?: Flex__<"div">;
  squeezeC2OfferThumbnail?: Flex__<typeof PlasmicImg__>;
  squeezeC2ValueH1?: Flex__<"div">;
  squeezeC2ValueH2?: Flex__<"div">;
  squeezeC2ValueH3?: Flex__<"div">;
  mobile?: Flex__<"div">;
  logo3?: Flex__<typeof PlasmicImg__>;
  squeezeC2Thumbnail2?: Flex__<typeof PlasmicImg__>;
  squeezeC2H13?: Flex__<"div">;
  squeezeC2H14?: Flex__<"div">;
  iconValue4?: Flex__<"div">;
  squeezeC2Icon12?: Flex__<typeof PlasmicImg__>;
  squeezeC2Icon1Value12?: Flex__<"div">;
  iconValue5?: Flex__<"div">;
  squeezeC2Icon22?: Flex__<typeof PlasmicImg__>;
  squeezeC2Icon1Value22?: Flex__<"div">;
  iconValue6?: Flex__<"div">;
  squeezeC2Icon32?: Flex__<typeof PlasmicImg__>;
  squeezeC2Icon1Value32?: Flex__<"div">;
  squeezeC2CtaH12?: Flex__<"div">;
  squeezeC2CtaH22?: Flex__<"div">;
  squeezeC2Proof2?: Flex__<"div">;
  squeezeC2OfferH12?: Flex__<"div">;
  squeezeC2OfferThumbnail2?: Flex__<typeof PlasmicImg__>;
  squeezeC2ValueH12?: Flex__<"div">;
  squeezeC2ValueH22?: Flex__<"div">;
  squeezeC2ValueH32?: Flex__<"div">;
  logo2?: Flex__<typeof PlasmicImg__>;
  squeezeNav2?: Flex__<"div">;
  squeezeC1H12?: Flex__<"div">;
  squeezeC1H22?: Flex__<"div">;
  form2?: Flex__<typeof FormWrapper>;
  input3?: Flex__<typeof AntdInput>;
  squeezeC1Field12?: Flex__<"div">;
  input4?: Flex__<typeof AntdInput>;
  squeezeC1Field22?: Flex__<"div">;
  squeezeC1Cta2?: Flex__<"div">;
  textInput3?: Flex__<typeof TextInput>;
  textInput4?: Flex__<typeof TextInput>;
  squeezeC1Disclaimer2?: Flex__<"div">;
  discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4?: Flex__<"div">;
  divlpPomRoot?: Flex__<"div">;
  divlpPomBlock11?: Flex__<"div">;
  divlpPomBlock21?: Flex__<"div">;
  divlpPositionedContent?: Flex__<"div">;
  divlpPomBox32?: Flex__<"div">;
  divlpPomForm19?: Flex__<"div">;
  inputfirstname?: Flex__<"div">;
  divplaceholder?: Flex__<"div">;
  yourFirstName?: Flex__<"div">;
  inputlastname?: Flex__<"div">;
  divplaceholder2?: Flex__<"div">;
  yourLastName?: Flex__<"div">;
  inputemail?: Flex__<"div">;
  divplaceholder3?: Flex__<"div">;
  yourEmailAddress?: Flex__<"div">;
  inputphone?: Flex__<"div">;
  divplaceholder4?: Flex__<"div">;
  yourPhoneNumber?: Flex__<"div">;
  divcontainerQualification?: Flex__<"div">;
  yourQualification?: Flex__<"div">;
  selectqualification?: Flex__<"div">;
  div?: Flex__<"div">;
  nurseRnOrNp?: Flex__<"div">;
  buttonlpPomButton20?: Flex__<"div">;
  _continue?: Flex__<"div">;
  divlpPomBox26?: Flex__<"div">;
  divlpPomImageContainer?: Flex__<"div">;
  _6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png?: Flex__<"div">;
  divlpPomImageContainer2?: Flex__<"div">;
  c510588BTrainingCenterGifPreview2Gif?: Flex__<"div">;
  divlpPomBox46?: Flex__<"div">;
  divlpPomImageContainer3?: Flex__<"div">;
  d33EfddcPinkChecksvg?: Flex__<"div">;
  d33EfddcPinkChecksvg2?: Flex__<"div">;
  learnFacialAnatomyBotulinumToxinScience?: Flex__<"div">;
  divlpPomBox52?: Flex__<"div">;
  divlpPomImageContainer4?: Flex__<"div">;
  d33EfddcPinkChecksvg3?: Flex__<"div">;
  d33EfddcPinkChecksvg4?: Flex__<"div">;
  smallClassSizeWithDedicated11Support?: Flex__<"div">;
  divlpPomBox55?: Flex__<"div">;
  divlpPomImageContainer5?: Flex__<"div">;
  d33EfddcPinkChecksvg5?: Flex__<"div">;
  d33EfddcPinkChecksvg6?: Flex__<"div">;
  strong?: Flex__<"div">;
  divlpPomImageContainer6?: Flex__<"div">;
  _3628940ACheckoutTrainingCenterPart210El08G000000000000028Png?: Flex__<"div">;
  divlpPomImageContainer7?: Flex__<"div">;
  c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png?: Flex__<"div">;
  getPricingDetails?: Flex__<"div">;
  divlpPomImageContainer8?: Flex__<"div">;
  _046F157ALogo250X104X01P04X01L000002028Png?: Flex__<"div">;
  span?: Flex__<"div">;
  submitToRequestAdditionalInformation?: Flex__<"div">;
  divlpPomBox33?: Flex__<"div">;
  p?: Flex__<"div">;
  iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg?: Flex__<"div">;
  cartRemindersAtThePhoneNumberProvidedConsentIsNotA?: Flex__<"div">;
  conditionToPurchaseMsgDataRatesMayApplyMsgFrequency?: Flex__<"div">;
  variesReplyHelpForHelpAndStopToCancelViewOurPrivacy?: Flex__<"div">;
  policyAndTermsOfService?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultSqueezeVariant2Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSqueezeVariant2__RenderFunc(props: {
  variants: PlasmicSqueezeVariant2__VariantsArgs;
  args: PlasmicSqueezeVariant2__ArgsType;
  overrides: PlasmicSqueezeVariant2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? `` : undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? `` : undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_365VKlwMc2UpC()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"desktop"}
        data-plasmic-override={overrides.desktop}
        className={classNames(projectcss.all, sty.desktop)}
      >
        <div className={classNames(projectcss.all, sty.columns__fn247)}>
          <div className={classNames(projectcss.all, sty.column__cBCwO)}>
            <PlasmicImg__
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              alt={""}
              className={classNames(sty.logo)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"175px"}
              loading={"eager"}
            />

            <div
              data-plasmic-name={"squeezeNav"}
              data-plasmic-override={overrides.squeezeNav}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.squeezeNav
              )}
            >
              {"Unlock Discount > Easy Checkout "}
            </div>
            <div
              data-plasmic-name={"squeezeC1H1"}
              data-plasmic-override={overrides.squeezeC1H1}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.squeezeC1H1
              )}
            >
              {"Get Pricing Details"}
            </div>
            <div
              data-plasmic-name={"squeezeC1H2"}
              data-plasmic-override={overrides.squeezeC1H2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.squeezeC1H2
              )}
            >
              {"Submit to Request Additional Information"}
            </div>
            <form
              action={
                "https://hook.us1.make.com/5mordka6hk6nytd9doqnbe6kbf4r3drk"
              }
              className={classNames(projectcss.all, sty.form___5LZoe)}
              method={"post"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form),
                  extendedOnValuesChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form", "value"],
                      FormWrapper_Helpers
                    ),
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: undefined,
                  onFinish: async values => {
                    const $steps = {};

                    $steps["zapierTrigger"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "8BxAb4WeSUGRTGvfMAoccZ",
                              opId: "e10ca2057349d66dabeccbbca0b50112b4e939ea69a57a5748b061b59437571c4cd091d3d604d52f80bee232c7163eb964615021a8bef04aad0d8455658c9683acc464c970435920f045",
                              userArgs: {},
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["zapierTrigger"] != null &&
                      typeof $steps["zapierTrigger"] === "object" &&
                      typeof $steps["zapierTrigger"].then === "function"
                    ) {
                      $steps["zapierTrigger"] = await $steps["zapierTrigger"];
                    }
                  },
                  onIsSubmittingChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form", "isSubmitting"],
                      FormWrapper_Helpers
                    ),
                  ref: ref => {
                    $refs["form"] = ref;
                  },
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___5EIu
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iTsEu
                          )}
                        >
                          {"Label"}
                        </div>
                      }
                      name={"name"}
                    >
                      {(() => {
                        const child$Props = {
                          addonAfter: null,
                          addonBefore: null,
                          className: classNames("__wab_instance", sty.input),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input", "value"],
                            AntdInput_Helpers
                          ),
                          prefix: null,
                          suffix: null,
                          value: generateStateValueProp($state, [
                            "input",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            {...child$Props}
                          />
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          addonAfter: null,
                          addonBefore: null,
                          className: classNames("__wab_instance", sty.input2),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input2", "value"],
                            AntdInput_Helpers
                          ),
                          prefix: null,
                          suffix: null,
                          value: generateStateValueProp($state, [
                            "input2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input2.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input2"}
                            data-plasmic-override={overrides.input2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__skAva
                      )}
                      icon={null}
                    >
                      <div
                        data-plasmic-name={"squeezeC1Cta"}
                        data-plasmic-override={overrides.squeezeC1Cta}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.squeezeC1Cta
                        )}
                      >
                        {"Submit"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
              <TextInput
                data-plasmic-name={"textInput"}
                data-plasmic-override={overrides.textInput}
                aria-label={"email"}
                className={classNames("__wab_instance", sty.textInput)}
                name={"field1"}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={"\ud83d\udce7 Your Email Address"}
                value={
                  generateStateValueProp($state, ["textInput", "value"]) ?? ""
                }
              />

              <TextInput
                data-plasmic-name={"textInput2"}
                data-plasmic-override={overrides.textInput2}
                aria-label={"email"}
                className={classNames("__wab_instance", sty.textInput2)}
                name={"field2"}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput2", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={"📧 Your Email Address"}
                value={
                  generateStateValueProp($state, ["textInput2", "value"]) ?? ""
                }
              />

              <Button
                className={classNames("__wab_instance", sty.button__mUmq)}
                color={undefined}
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__o5VMy
                  )}
                >
                  {"Get Offer"}
                </div>
              </Button>
            </form>
            <div className={classNames(projectcss.all, sty.freeBox___8QUru)} />

            <div className={classNames(projectcss.all, sty.freeBox___16RzI)}>
              <div
                data-plasmic-name={"squeezeC1Disclaimer"}
                data-plasmic-override={overrides.squeezeC1Disclaimer}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.squeezeC1Disclaimer
                )}
              >
                {
                  "I agree to receive recurring automated marketing text messages (e.g. cart reminders) at the phone number provided. Consent is not a condition to purchase. Msg & data rates may apply. Msg frequency varies. Reply HELP for help and STOP to cancel. View our Privacy Policy and Terms of Service."
                }
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.column__qKm0P)}>
            <div className={classNames(projectcss.all, sty.freeBox__pl5Hx)}>
              <PlasmicImg__
                data-plasmic-name={"squeezeC2Thumbnail"}
                data-plasmic-override={overrides.squeezeC2Thumbnail}
                alt={""}
                className={classNames(sty.squeezeC2Thumbnail)}
                displayHeight={"auto"}
                displayMaxHeight={"190px"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"173px"}
                loading={"eager"}
                src={undefined}
              />

              <div className={classNames(projectcss.all, sty.freeBox__vqCt8)}>
                <div
                  data-plasmic-name={"squeezeC2H1"}
                  data-plasmic-override={overrides.squeezeC2H1}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2H1
                  )}
                >
                  {"Main Headline Goes Here"}
                </div>
                <div
                  data-plasmic-name={"squeezeC2H12"}
                  data-plasmic-override={overrides.squeezeC2H12}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2H12
                  )}
                >
                  {"Secondary Headline Goes Here"}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__kQuub)} />

            <div
              data-plasmic-name={"iconValue1"}
              data-plasmic-override={overrides.iconValue1}
              className={classNames(projectcss.all, sty.iconValue1)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__woXuV)}>
                <PlasmicImg__
                  data-plasmic-name={"squeezeC2Icon1"}
                  data-plasmic-override={overrides.squeezeC2Icon1}
                  alt={""}
                  className={classNames(sty.squeezeC2Icon1)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40px"}
                  loading={"eager"}
                  src={(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .squeeze_c2_icon1[0].url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  data-plasmic-name={"squeezeC2Icon1Value1"}
                  data-plasmic-override={overrides.squeezeC2Icon1Value1}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2Icon1Value1
                  )}
                >
                  {"Icon Value 1"}
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"iconValue2"}
              data-plasmic-override={overrides.iconValue2}
              className={classNames(projectcss.all, sty.iconValue2)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___8KdLv)}>
                <PlasmicImg__
                  data-plasmic-name={"squeezeC2Icon2"}
                  data-plasmic-override={overrides.squeezeC2Icon2}
                  alt={""}
                  className={classNames(sty.squeezeC2Icon2)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40px"}
                  loading={"eager"}
                  src={(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .squeeze_c2_icon2[0].url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  data-plasmic-name={"squeezeC2Icon1Value2"}
                  data-plasmic-override={overrides.squeezeC2Icon1Value2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2Icon1Value2
                  )}
                >
                  {"Icon Value 2"}
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"iconValue3"}
              data-plasmic-override={overrides.iconValue3}
              className={classNames(projectcss.all, sty.iconValue3)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__g8Ro)}>
                <PlasmicImg__
                  data-plasmic-name={"squeezeC2Icon3"}
                  data-plasmic-override={overrides.squeezeC2Icon3}
                  alt={""}
                  className={classNames(sty.squeezeC2Icon3)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40px"}
                  loading={"eager"}
                  src={(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .squeeze_c2_icon3[0].url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  data-plasmic-name={"squeezeC2Icon1Value3"}
                  data-plasmic-override={overrides.squeezeC2Icon1Value3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2Icon1Value3
                  )}
                >
                  {"Icon Value 3"}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__nsHI)} />

            <div className={classNames(projectcss.all, sty.freeBox__aFvWi)}>
              <div
                data-plasmic-name={"squeezeC2CtaH1"}
                data-plasmic-override={overrides.squeezeC2CtaH1}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.squeezeC2CtaH1
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .squeeze_c2_cta_h1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "CTA Headline 1";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"squeezeC2CtaH2"}
                data-plasmic-override={overrides.squeezeC2CtaH2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.squeezeC2CtaH2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .squeeze_c2_cta_h2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "CTA Headline 2";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___5VccO)} />

            <div className={classNames(projectcss.all, sty.freeBox__lkyB2)}>
              <div
                data-plasmic-name={"squeezeC2Proof"}
                data-plasmic-override={overrides.squeezeC2Proof}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.squeezeC2Proof
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .squeeze_c2_proof;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Enter some text";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___3VKd0)}>
              <div className={classNames(projectcss.all, sty.freeBox__sWoBq)}>
                <div
                  data-plasmic-name={"squeezeC2OfferH1"}
                  data-plasmic-override={overrides.squeezeC2OfferH1}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2OfferH1
                  )}
                >
                  {"Enter some text:"}
                </div>
                <PlasmicImg__
                  data-plasmic-name={"squeezeC2OfferThumbnail"}
                  data-plasmic-override={overrides.squeezeC2OfferThumbnail}
                  alt={""}
                  className={classNames(sty.squeezeC2OfferThumbnail)}
                  displayHeight={"auto"}
                  displayMaxHeight={"50px"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"eager"}
                  src={undefined}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__s9Ymf
                  )}
                >
                  {"Enter some text"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__kbEyH)}>
                <div
                  data-plasmic-name={"squeezeC2ValueH1"}
                  data-plasmic-override={overrides.squeezeC2ValueH1}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2ValueH1
                  )}
                >
                  {"Enter some text"}
                </div>
                <div
                  data-plasmic-name={"squeezeC2ValueH2"}
                  data-plasmic-override={overrides.squeezeC2ValueH2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2ValueH2
                  )}
                >
                  {"Enter some text"}
                </div>
                <div
                  data-plasmic-name={"squeezeC2ValueH3"}
                  data-plasmic-override={overrides.squeezeC2ValueH3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2ValueH3
                  )}
                >
                  {"Enter some text"}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <div
          data-plasmic-name={"mobile"}
          data-plasmic-override={overrides.mobile}
          className={classNames(projectcss.all, sty.mobile)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__x0Aqo)}>
            <PlasmicImg__
              data-plasmic-name={"logo3"}
              data-plasmic-override={overrides.logo3}
              alt={""}
              className={classNames(sty.logo3)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"175px"}
              loading={"eager"}
              src={undefined}
            />
          </div>
          <div className={classNames(projectcss.all, sty.columns___2BsmU)}>
            <div className={classNames(projectcss.all, sty.column__bxXPx)}>
              <div className={classNames(projectcss.all, sty.freeBox__r6H97)}>
                <PlasmicImg__
                  data-plasmic-name={"squeezeC2Thumbnail2"}
                  data-plasmic-override={overrides.squeezeC2Thumbnail2}
                  alt={""}
                  className={classNames(sty.squeezeC2Thumbnail2)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"125px"}
                  loading={"eager"}
                  src={undefined}
                />

                <div className={classNames(projectcss.all, sty.freeBox__kvygL)}>
                  <div
                    data-plasmic-name={"squeezeC2H13"}
                    data-plasmic-override={overrides.squeezeC2H13}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.squeezeC2H13
                    )}
                  >
                    {"Main Headline Goes Here"}
                  </div>
                  <div
                    data-plasmic-name={"squeezeC2H14"}
                    data-plasmic-override={overrides.squeezeC2H14}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.squeezeC2H14
                    )}
                  >
                    {"Secondary Headline Goes Here"}
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__bQjQq)} />

              <div
                data-plasmic-name={"iconValue4"}
                data-plasmic-override={overrides.iconValue4}
                className={classNames(projectcss.all, sty.iconValue4)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__dguiV)}>
                  <PlasmicImg__
                    data-plasmic-name={"squeezeC2Icon12"}
                    data-plasmic-override={overrides.squeezeC2Icon12}
                    alt={""}
                    className={classNames(sty.squeezeC2Icon12)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"40px"}
                    loading={"eager"}
                    src={(() => {
                      try {
                        return $ctx.fetchDyanamicData.records[0].fields
                          .squeeze_c2_icon1[0].url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  <div
                    data-plasmic-name={"squeezeC2Icon1Value12"}
                    data-plasmic-override={overrides.squeezeC2Icon1Value12}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.squeezeC2Icon1Value12
                    )}
                  >
                    {"Icon Value 1"}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"iconValue5"}
                data-plasmic-override={overrides.iconValue5}
                className={classNames(projectcss.all, sty.iconValue5)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__sf5CK)}>
                  <PlasmicImg__
                    data-plasmic-name={"squeezeC2Icon22"}
                    data-plasmic-override={overrides.squeezeC2Icon22}
                    alt={""}
                    className={classNames(sty.squeezeC2Icon22)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"40px"}
                    loading={"eager"}
                    src={(() => {
                      try {
                        return $ctx.fetchDyanamicData.records[0].fields
                          .squeeze_c2_icon2[0].url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  <div
                    data-plasmic-name={"squeezeC2Icon1Value22"}
                    data-plasmic-override={overrides.squeezeC2Icon1Value22}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.squeezeC2Icon1Value22
                    )}
                  >
                    {"Icon Value 2"}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"iconValue6"}
                data-plasmic-override={overrides.iconValue6}
                className={classNames(projectcss.all, sty.iconValue6)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__wLsS8)}>
                  <PlasmicImg__
                    data-plasmic-name={"squeezeC2Icon32"}
                    data-plasmic-override={overrides.squeezeC2Icon32}
                    alt={""}
                    className={classNames(sty.squeezeC2Icon32)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"40px"}
                    loading={"eager"}
                    src={(() => {
                      try {
                        return $ctx.fetchDyanamicData.records[0].fields
                          .squeeze_c2_icon3[0].url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  <div
                    data-plasmic-name={"squeezeC2Icon1Value32"}
                    data-plasmic-override={overrides.squeezeC2Icon1Value32}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.squeezeC2Icon1Value32
                    )}
                  >
                    {"Icon Value 3"}
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__beOV)} />

              <div className={classNames(projectcss.all, sty.freeBox__pgoEp)}>
                <div
                  data-plasmic-name={"squeezeC2CtaH12"}
                  data-plasmic-override={overrides.squeezeC2CtaH12}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2CtaH12
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchDyanamicData.records[0].fields
                          .squeeze_c2_cta_h1;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "CTA Headline 1";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"squeezeC2CtaH22"}
                  data-plasmic-override={overrides.squeezeC2CtaH22}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2CtaH22
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchDyanamicData.records[0].fields
                          .squeeze_c2_cta_h2;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "CTA Headline 2";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__iTuM6)} />

              <div className={classNames(projectcss.all, sty.freeBox___0F2OW)}>
                <div
                  data-plasmic-name={"squeezeC2Proof2"}
                  data-plasmic-override={overrides.squeezeC2Proof2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2Proof2
                  )}
                >
                  {"Enter some text"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__jJhOm)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___5VRws)}
                >
                  <div
                    data-plasmic-name={"squeezeC2OfferH12"}
                    data-plasmic-override={overrides.squeezeC2OfferH12}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.squeezeC2OfferH12
                    )}
                  >
                    {"Enter some text:"}
                  </div>
                  <PlasmicImg__
                    data-plasmic-name={"squeezeC2OfferThumbnail2"}
                    data-plasmic-override={overrides.squeezeC2OfferThumbnail2}
                    alt={""}
                    className={classNames(sty.squeezeC2OfferThumbnail2)}
                    displayHeight={"auto"}
                    displayMaxHeight={"50px"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"eager"}
                    src={undefined}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5IZwa
                    )}
                  >
                    {"Enter some text"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__tKrfp)}>
                  <div
                    data-plasmic-name={"squeezeC2ValueH12"}
                    data-plasmic-override={overrides.squeezeC2ValueH12}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.squeezeC2ValueH12
                    )}
                  >
                    {"Enter some text"}
                  </div>
                  <div
                    data-plasmic-name={"squeezeC2ValueH22"}
                    data-plasmic-override={overrides.squeezeC2ValueH22}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.squeezeC2ValueH22
                    )}
                  >
                    {"Enter some text"}
                  </div>
                  <div
                    data-plasmic-name={"squeezeC2ValueH32"}
                    data-plasmic-override={overrides.squeezeC2ValueH32}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.squeezeC2ValueH32
                    )}
                  >
                    {"Enter some text"}
                  </div>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column___0GtkR)}>
              <PlasmicImg__
                data-plasmic-name={"logo2"}
                data-plasmic-override={overrides.logo2}
                alt={""}
                className={classNames(sty.logo2)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/legacy_feed_page_designs/images/_046F157ALogo250X104X01P04X01L000002028Png.png",
                  fullWidth: 177,
                  fullHeight: 57,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"squeezeNav2"}
                data-plasmic-override={overrides.squeezeNav2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.squeezeNav2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .squeeze_c1_nav;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"squeezeC1H12"}
                data-plasmic-override={overrides.squeezeC1H12}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.squeezeC1H12
                )}
              >
                {"Get Pricing Details"}
              </div>
              <div
                data-plasmic-name={"squeezeC1H22"}
                data-plasmic-override={overrides.squeezeC1H22}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.squeezeC1H22
                )}
              >
                {"Submit to Request Additional Information"}
              </div>
              <form
                action={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "https://hook.us1.make.com/5mordka6hk6nytd9doqnbe6kbf4r3drk"
                    : undefined
                }
                className={classNames(projectcss.all, sty.form__wVFT)}
                method={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "post"
                    : undefined
                }
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form2),
                    extendedOnValuesChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form2", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: undefined,
                    onIsSubmittingChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form2", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["form2"] = ref;
                    },
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form2.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form2.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form2"}
                      data-plasmic-override={overrides.form2}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__d2QIr
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6RVTp
                            )}
                          >
                            {"Label"}
                          </div>
                        }
                        name={"name"}
                      >
                        {(() => {
                          const child$Props = {
                            addonAfter: null,
                            addonBefore: null,
                            className: classNames("__wab_instance", sty.input3),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input3", "value"],
                                AntdInput_Helpers
                              ),
                            prefix: (
                              <div
                                data-plasmic-name={"squeezeC1Field12"}
                                data-plasmic-override={
                                  overrides.squeezeC1Field12
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC1Field12
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c1_field1;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "👋  Your First Name";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            ),
                            suffix: null,
                            value: generateStateValueProp($state, [
                              "input3",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input3.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input3"}
                              data-plasmic-override={overrides.input3}
                              {...child$Props}
                            />
                          );
                        })()}
                        {(() => {
                          const child$Props = {
                            addonAfter: null,
                            addonBefore: null,
                            className: classNames("__wab_instance", sty.input4),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input4", "value"],
                                AntdInput_Helpers
                              ),
                            prefix: (
                              <div
                                data-plasmic-name={"squeezeC1Field22"}
                                data-plasmic-override={
                                  overrides.squeezeC1Field22
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.squeezeC1Field22
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.fetchDyanamicData.records[0]
                                        .fields.squeeze_c1_field2;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "📩  Your Email Address";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            ),
                            suffix: null,
                            value: generateStateValueProp($state, [
                              "input4",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input4.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input4"}
                              data-plasmic-override={overrides.input4}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__bFqXa
                        )}
                        icon={null}
                      >
                        <div
                          data-plasmic-name={"squeezeC1Cta2"}
                          data-plasmic-override={overrides.squeezeC1Cta2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.squeezeC1Cta2
                          )}
                        >
                          {"Submit"}
                        </div>
                      </AntdButton>
                    </FormWrapper>
                  );
                })()}
                <TextInput
                  data-plasmic-name={"textInput3"}
                  data-plasmic-override={overrides.textInput3}
                  aria-label={"email"}
                  className={classNames("__wab_instance", sty.textInput3)}
                  name={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "field1"
                      : "email"
                  }
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["textInput3", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }}
                  placeholder={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields
                              .squeeze_c1_field1;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "📧 Your Email Address";
                            }
                            throw e;
                          }
                        })()
                      : "📧 Your Email Address"
                  }
                  value={
                    generateStateValueProp($state, ["textInput3", "value"]) ??
                    ""
                  }
                />

                <TextInput
                  data-plasmic-name={"textInput4"}
                  data-plasmic-override={overrides.textInput4}
                  aria-label={"email"}
                  className={classNames("__wab_instance", sty.textInput4)}
                  name={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "field2"
                      : "email"
                  }
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, ["textInput4", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }}
                  placeholder={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $ctx.fetchDyanamicData.records[0].fields
                              .squeeze_c1_field2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "📧 Your Email Address";
                            }
                            throw e;
                          }
                        })()
                      : "📧 Your Email Address"
                  }
                  value={
                    generateStateValueProp($state, ["textInput4", "value"]) ??
                    ""
                  }
                />

                <Button
                  className={classNames("__wab_instance", sty.button__oxvhx)}
                  color={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? undefined
                      : undefined
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zWoZz
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.fetchDyanamicData.records[0].fields
                            .squeeze_c1_cta;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Get Offer";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Button>
              </form>
              <div className={classNames(projectcss.all, sty.freeBox__xioYq)} />

              <div className={classNames(projectcss.all, sty.freeBox__yrTmP)}>
                <div
                  data-plasmic-name={"squeezeC1Disclaimer2"}
                  data-plasmic-override={overrides.squeezeC1Disclaimer2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC1Disclaimer2
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.fetchDyanamicData.records[0].fields
                            .squeeze_c1_disclaimer;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "I agree to receive recurring automated marketing text messages (e.g. cart reminders) at the phone number provided. Consent is not a condition to purchase. Msg & data rates may apply. Msg frequency varies. Reply HELP for help and STOP to cancel. View our Privacy Policy and Terms of Service.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    "I agree to receive recurring automated marketing text messages (e.g. cart reminders) at the phone number provided. Consent is not a condition to purchase. Msg & data rates may apply. Msg frequency varies. Reply HELP for help and STOP to cancel. View our Privacy Policy and Terms of Service."
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      ) : null}
      <div
        data-plasmic-name={
          "discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4"
        }
        data-plasmic-override={
          overrides.discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4
        }
        className={classNames(
          projectcss.all,
          sty.discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4
        )}
      >
        <div
          data-plasmic-name={"divlpPomRoot"}
          data-plasmic-override={overrides.divlpPomRoot}
          className={classNames(projectcss.all, sty.divlpPomRoot)}
        >
          <div
            data-plasmic-name={"divlpPomBlock11"}
            data-plasmic-override={overrides.divlpPomBlock11}
            className={classNames(projectcss.all, sty.divlpPomBlock11)}
          />

          <div
            data-plasmic-name={"divlpPomBlock21"}
            data-plasmic-override={overrides.divlpPomBlock21}
            className={classNames(projectcss.all, sty.divlpPomBlock21)}
          />

          <div
            data-plasmic-name={"divlpPositionedContent"}
            data-plasmic-override={overrides.divlpPositionedContent}
            className={classNames(projectcss.all, sty.divlpPositionedContent)}
          >
            <div
              data-plasmic-name={"divlpPomBox32"}
              data-plasmic-override={overrides.divlpPomBox32}
              className={classNames(projectcss.all, sty.divlpPomBox32)}
            >
              <div
                data-plasmic-name={"divlpPomForm19"}
                data-plasmic-override={overrides.divlpPomForm19}
                className={classNames(projectcss.all, sty.divlpPomForm19)}
              >
                <div
                  data-plasmic-name={"inputfirstname"}
                  data-plasmic-override={overrides.inputfirstname}
                  className={classNames(projectcss.all, sty.inputfirstname)}
                >
                  <div
                    data-plasmic-name={"divplaceholder"}
                    data-plasmic-override={overrides.divplaceholder}
                    className={classNames(projectcss.all, sty.divplaceholder)}
                  >
                    <div
                      data-plasmic-name={"yourFirstName"}
                      data-plasmic-override={overrides.yourFirstName}
                      className={classNames(projectcss.all, sty.yourFirstName)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jbhWu
                        )}
                      >
                        {"Your First Name"}
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"inputlastname"}
                  data-plasmic-override={overrides.inputlastname}
                  className={classNames(projectcss.all, sty.inputlastname)}
                >
                  <div
                    data-plasmic-name={"divplaceholder2"}
                    data-plasmic-override={overrides.divplaceholder2}
                    className={classNames(projectcss.all, sty.divplaceholder2)}
                  >
                    <div
                      data-plasmic-name={"yourLastName"}
                      data-plasmic-override={overrides.yourLastName}
                      className={classNames(projectcss.all, sty.yourLastName)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mOiQ
                        )}
                      >
                        {"Your Last Name"}
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"inputemail"}
                  data-plasmic-override={overrides.inputemail}
                  className={classNames(projectcss.all, sty.inputemail)}
                >
                  <div
                    data-plasmic-name={"divplaceholder3"}
                    data-plasmic-override={overrides.divplaceholder3}
                    className={classNames(projectcss.all, sty.divplaceholder3)}
                  >
                    <div
                      data-plasmic-name={"yourEmailAddress"}
                      data-plasmic-override={overrides.yourEmailAddress}
                      className={classNames(
                        projectcss.all,
                        sty.yourEmailAddress
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iDtzs
                        )}
                      >
                        {"Your Email Address"}
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"inputphone"}
                  data-plasmic-override={overrides.inputphone}
                  className={classNames(projectcss.all, sty.inputphone)}
                >
                  <div
                    data-plasmic-name={"divplaceholder4"}
                    data-plasmic-override={overrides.divplaceholder4}
                    className={classNames(projectcss.all, sty.divplaceholder4)}
                  >
                    <div
                      data-plasmic-name={"yourPhoneNumber"}
                      data-plasmic-override={overrides.yourPhoneNumber}
                      className={classNames(
                        projectcss.all,
                        sty.yourPhoneNumber
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2FhiU
                        )}
                      >
                        {"Your Phone Number"}
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"divcontainerQualification"}
                  data-plasmic-override={overrides.divcontainerQualification}
                  className={classNames(
                    projectcss.all,
                    sty.divcontainerQualification
                  )}
                >
                  <div
                    data-plasmic-name={"yourQualification"}
                    data-plasmic-override={overrides.yourQualification}
                    className={classNames(
                      projectcss.all,
                      sty.yourQualification
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eXrnd
                      )}
                    >
                      {"Your Qualification"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"selectqualification"}
                    data-plasmic-override={overrides.selectqualification}
                    className={classNames(
                      projectcss.all,
                      sty.selectqualification
                    )}
                  >
                    <div
                      data-plasmic-name={"div"}
                      data-plasmic-override={overrides.div}
                      className={classNames(projectcss.all, sty.div)}
                    >
                      <div
                        data-plasmic-name={"nurseRnOrNp"}
                        data-plasmic-override={overrides.nurseRnOrNp}
                        className={classNames(projectcss.all, sty.nurseRnOrNp)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hnssE
                          )}
                        >
                          {"Nurse ( RN or NP)"}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"buttonlpPomButton20"}
                  data-plasmic-override={overrides.buttonlpPomButton20}
                  className={classNames(
                    projectcss.all,
                    sty.buttonlpPomButton20
                  )}
                >
                  <div
                    data-plasmic-name={"_continue"}
                    data-plasmic-override={overrides._continue}
                    className={classNames(projectcss.all, sty._continue)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__s6LdS
                      )}
                    >
                      {"CONTINUE"}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"divlpPomBox26"}
              data-plasmic-override={overrides.divlpPomBox26}
              className={classNames(projectcss.all, sty.divlpPomBox26)}
            >
              <div
                data-plasmic-name={"divlpPomImageContainer"}
                data-plasmic-override={overrides.divlpPomImageContainer}
                className={classNames(
                  projectcss.all,
                  sty.divlpPomImageContainer
                )}
              >
                <div
                  data-plasmic-name={
                    "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png"
                  }
                  data-plasmic-override={
                    overrides._6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png
                  }
                  className={classNames(
                    projectcss.all,
                    sty._6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png
                  )}
                />
              </div>
              <div
                data-plasmic-name={"divlpPomImageContainer2"}
                data-plasmic-override={overrides.divlpPomImageContainer2}
                className={classNames(
                  projectcss.all,
                  sty.divlpPomImageContainer2
                )}
              >
                <div
                  data-plasmic-name={"c510588BTrainingCenterGifPreview2Gif"}
                  data-plasmic-override={
                    overrides.c510588BTrainingCenterGifPreview2Gif
                  }
                  className={classNames(
                    projectcss.all,
                    sty.c510588BTrainingCenterGifPreview2Gif
                  )}
                />
              </div>
              <div
                data-plasmic-name={"divlpPomBox46"}
                data-plasmic-override={overrides.divlpPomBox46}
                className={classNames(projectcss.all, sty.divlpPomBox46)}
              >
                <div
                  data-plasmic-name={"divlpPomImageContainer3"}
                  data-plasmic-override={overrides.divlpPomImageContainer3}
                  className={classNames(
                    projectcss.all,
                    sty.divlpPomImageContainer3
                  )}
                >
                  <div
                    data-plasmic-name={"d33EfddcPinkChecksvg"}
                    data-plasmic-override={overrides.d33EfddcPinkChecksvg}
                    className={classNames(
                      projectcss.all,
                      sty.d33EfddcPinkChecksvg
                    )}
                  >
                    <div
                      data-plasmic-name={"d33EfddcPinkChecksvg2"}
                      data-plasmic-override={overrides.d33EfddcPinkChecksvg2}
                      className={classNames(
                        projectcss.all,
                        sty.d33EfddcPinkChecksvg2
                      )}
                    >
                      <VectorIcon
                        className={classNames(projectcss.all, sty.svg__pjoLj)}
                        role={"img"}
                      />

                      <Vector2Icon
                        className={classNames(projectcss.all, sty.svg__mxjgj)}
                        role={"img"}
                      />

                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg__nyX65)}
                        role={"img"}
                      />
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"learnFacialAnatomyBotulinumToxinScience"}
                  data-plasmic-override={
                    overrides.learnFacialAnatomyBotulinumToxinScience
                  }
                  className={classNames(
                    projectcss.all,
                    sty.learnFacialAnatomyBotulinumToxinScience
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qd1Fd
                    )}
                  >
                    {"Learn Facial Anatomy & Botulinum Toxin Science"}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"divlpPomBox52"}
                data-plasmic-override={overrides.divlpPomBox52}
                className={classNames(projectcss.all, sty.divlpPomBox52)}
              >
                <div
                  data-plasmic-name={"divlpPomImageContainer4"}
                  data-plasmic-override={overrides.divlpPomImageContainer4}
                  className={classNames(
                    projectcss.all,
                    sty.divlpPomImageContainer4
                  )}
                >
                  <div
                    data-plasmic-name={"d33EfddcPinkChecksvg3"}
                    data-plasmic-override={overrides.d33EfddcPinkChecksvg3}
                    className={classNames(
                      projectcss.all,
                      sty.d33EfddcPinkChecksvg3
                    )}
                  >
                    <div
                      data-plasmic-name={"d33EfddcPinkChecksvg4"}
                      data-plasmic-override={overrides.d33EfddcPinkChecksvg4}
                      className={classNames(
                        projectcss.all,
                        sty.d33EfddcPinkChecksvg4
                      )}
                    >
                      <VectorIcon
                        className={classNames(projectcss.all, sty.svg__voFAw)}
                        role={"img"}
                      />

                      <Vector2Icon
                        className={classNames(projectcss.all, sty.svg___2Guk3)}
                        role={"img"}
                      />

                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg__yeoAx)}
                        role={"img"}
                      />
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"smallClassSizeWithDedicated11Support"}
                  data-plasmic-override={
                    overrides.smallClassSizeWithDedicated11Support
                  }
                  className={classNames(
                    projectcss.all,
                    sty.smallClassSizeWithDedicated11Support
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__epdd3
                    )}
                  >
                    {"Small Class Size With Dedicated 1:1 Support"}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"divlpPomBox55"}
                data-plasmic-override={overrides.divlpPomBox55}
                className={classNames(projectcss.all, sty.divlpPomBox55)}
              >
                <div
                  data-plasmic-name={"divlpPomImageContainer5"}
                  data-plasmic-override={overrides.divlpPomImageContainer5}
                  className={classNames(
                    projectcss.all,
                    sty.divlpPomImageContainer5
                  )}
                >
                  <div
                    data-plasmic-name={"d33EfddcPinkChecksvg5"}
                    data-plasmic-override={overrides.d33EfddcPinkChecksvg5}
                    className={classNames(
                      projectcss.all,
                      sty.d33EfddcPinkChecksvg5
                    )}
                  >
                    <div
                      data-plasmic-name={"d33EfddcPinkChecksvg6"}
                      data-plasmic-override={overrides.d33EfddcPinkChecksvg6}
                      className={classNames(
                        projectcss.all,
                        sty.d33EfddcPinkChecksvg6
                      )}
                    >
                      <VectorIcon
                        className={classNames(projectcss.all, sty.svg__i1KR5)}
                        role={"img"}
                      />

                      <Vector2Icon
                        className={classNames(projectcss.all, sty.svg__snvi)}
                        role={"img"}
                      />

                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg__yDyYn)}
                        role={"img"}
                      />
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"strong"}
                  data-plasmic-override={overrides.strong}
                  className={classNames(projectcss.all, sty.strong)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nFaSb
                    )}
                  >
                    {"$151,109 Medium Annual Salary - Glassdoor"}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"divlpPomImageContainer6"}
                data-plasmic-override={overrides.divlpPomImageContainer6}
                className={classNames(
                  projectcss.all,
                  sty.divlpPomImageContainer6
                )}
              >
                <div
                  data-plasmic-name={
                    "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png"
                  }
                  data-plasmic-override={
                    overrides._3628940ACheckoutTrainingCenterPart210El08G000000000000028Png
                  }
                  className={classNames(
                    projectcss.all,
                    sty._3628940ACheckoutTrainingCenterPart210El08G000000000000028Png
                  )}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"divlpPomImageContainer7"}
              data-plasmic-override={overrides.divlpPomImageContainer7}
              className={classNames(
                projectcss.all,
                sty.divlpPomImageContainer7
              )}
            >
              <div
                data-plasmic-name={
                  "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png"
                }
                data-plasmic-override={
                  overrides.c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png
                }
                className={classNames(
                  projectcss.all,
                  sty.c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png
                )}
              />
            </div>
            <div
              data-plasmic-name={"getPricingDetails"}
              data-plasmic-override={overrides.getPricingDetails}
              className={classNames(projectcss.all, sty.getPricingDetails)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u3MjL
                )}
              >
                {"Get Pricing Details"}
              </div>
            </div>
            <div
              data-plasmic-name={"divlpPomImageContainer8"}
              data-plasmic-override={overrides.divlpPomImageContainer8}
              className={classNames(
                projectcss.all,
                sty.divlpPomImageContainer8
              )}
            >
              <div
                data-plasmic-name={"_046F157ALogo250X104X01P04X01L000002028Png"}
                data-plasmic-override={
                  overrides._046F157ALogo250X104X01P04X01L000002028Png
                }
                className={classNames(
                  projectcss.all,
                  sty._046F157ALogo250X104X01P04X01L000002028Png
                )}
              />
            </div>
            <div
              data-plasmic-name={"span"}
              data-plasmic-override={overrides.span}
              className={classNames(projectcss.all, sty.span)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vkHrU
                )}
              >
                {
                  "Unlock Course Pricing\u00a0\u00a0>\u00a0\u00a0Access\u00a0Curriculum & Syllabus"
                }
              </div>
            </div>
            <div
              data-plasmic-name={"submitToRequestAdditionalInformation"}
              data-plasmic-override={
                overrides.submitToRequestAdditionalInformation
              }
              className={classNames(
                projectcss.all,
                sty.submitToRequestAdditionalInformation
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tuPhe
                )}
              >
                {"Submit to Request Additional Information"}
              </div>
            </div>
            <div
              data-plasmic-name={"divlpPomBox33"}
              data-plasmic-override={overrides.divlpPomBox33}
              className={classNames(projectcss.all, sty.divlpPomBox33)}
            />

            <div
              data-plasmic-name={"p"}
              data-plasmic-override={overrides.p}
              className={classNames(projectcss.all, sty.p)}
            >
              <div
                data-plasmic-name={
                  "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg"
                }
                data-plasmic-override={
                  overrides.iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg
                }
                className={classNames(
                  projectcss.all,
                  sty.iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__db8Nx
                  )}
                >
                  {
                    "I agree to receive recurring automated marketing text messages (e.g."
                  }
                </div>
              </div>
              <div
                data-plasmic-name={
                  "cartRemindersAtThePhoneNumberProvidedConsentIsNotA"
                }
                data-plasmic-override={
                  overrides.cartRemindersAtThePhoneNumberProvidedConsentIsNotA
                }
                className={classNames(
                  projectcss.all,
                  sty.cartRemindersAtThePhoneNumberProvidedConsentIsNotA
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pRezL
                  )}
                >
                  {
                    "cart reminders) at the phone number provided. Consent is not a"
                  }
                </div>
              </div>
              <div
                data-plasmic-name={
                  "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency"
                }
                data-plasmic-override={
                  overrides.conditionToPurchaseMsgDataRatesMayApplyMsgFrequency
                }
                className={classNames(
                  projectcss.all,
                  sty.conditionToPurchaseMsgDataRatesMayApplyMsgFrequency
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vh1Hc
                  )}
                >
                  {
                    "condition to purchase. Msg & data rates may apply. Msg frequency"
                  }
                </div>
              </div>
              <div
                data-plasmic-name={
                  "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy"
                }
                data-plasmic-override={
                  overrides.variesReplyHelpForHelpAndStopToCancelViewOurPrivacy
                }
                className={classNames(
                  projectcss.all,
                  sty.variesReplyHelpForHelpAndStopToCancelViewOurPrivacy
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gvLsD
                  )}
                >
                  {
                    "varies. Reply HELP for help and STOP to cancel. View our\u00a0Privacy"
                  }
                </div>
              </div>
              <div
                data-plasmic-name={"policyAndTermsOfService"}
                data-plasmic-override={overrides.policyAndTermsOfService}
                className={classNames(
                  projectcss.all,
                  sty.policyAndTermsOfService
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hbZye
                  )}
                >
                  {"Policy\u00a0and\u00a0Terms of Service."}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "desktop",
    "logo",
    "squeezeNav",
    "squeezeC1H1",
    "squeezeC1H2",
    "form",
    "input",
    "input2",
    "squeezeC1Cta",
    "textInput",
    "textInput2",
    "squeezeC1Disclaimer",
    "squeezeC2Thumbnail",
    "squeezeC2H1",
    "squeezeC2H12",
    "iconValue1",
    "squeezeC2Icon1",
    "squeezeC2Icon1Value1",
    "iconValue2",
    "squeezeC2Icon2",
    "squeezeC2Icon1Value2",
    "iconValue3",
    "squeezeC2Icon3",
    "squeezeC2Icon1Value3",
    "squeezeC2CtaH1",
    "squeezeC2CtaH2",
    "squeezeC2Proof",
    "squeezeC2OfferH1",
    "squeezeC2OfferThumbnail",
    "squeezeC2ValueH1",
    "squeezeC2ValueH2",
    "squeezeC2ValueH3",
    "mobile",
    "logo3",
    "squeezeC2Thumbnail2",
    "squeezeC2H13",
    "squeezeC2H14",
    "iconValue4",
    "squeezeC2Icon12",
    "squeezeC2Icon1Value12",
    "iconValue5",
    "squeezeC2Icon22",
    "squeezeC2Icon1Value22",
    "iconValue6",
    "squeezeC2Icon32",
    "squeezeC2Icon1Value32",
    "squeezeC2CtaH12",
    "squeezeC2CtaH22",
    "squeezeC2Proof2",
    "squeezeC2OfferH12",
    "squeezeC2OfferThumbnail2",
    "squeezeC2ValueH12",
    "squeezeC2ValueH22",
    "squeezeC2ValueH32",
    "logo2",
    "squeezeNav2",
    "squeezeC1H12",
    "squeezeC1H22",
    "form2",
    "input3",
    "squeezeC1Field12",
    "input4",
    "squeezeC1Field22",
    "squeezeC1Cta2",
    "textInput3",
    "textInput4",
    "squeezeC1Disclaimer2",
    "discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4",
    "divlpPomRoot",
    "divlpPomBlock11",
    "divlpPomBlock21",
    "divlpPositionedContent",
    "divlpPomBox32",
    "divlpPomForm19",
    "inputfirstname",
    "divplaceholder",
    "yourFirstName",
    "inputlastname",
    "divplaceholder2",
    "yourLastName",
    "inputemail",
    "divplaceholder3",
    "yourEmailAddress",
    "inputphone",
    "divplaceholder4",
    "yourPhoneNumber",
    "divcontainerQualification",
    "yourQualification",
    "selectqualification",
    "div",
    "nurseRnOrNp",
    "buttonlpPomButton20",
    "_continue",
    "divlpPomBox26",
    "divlpPomImageContainer",
    "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png",
    "divlpPomImageContainer2",
    "c510588BTrainingCenterGifPreview2Gif",
    "divlpPomBox46",
    "divlpPomImageContainer3",
    "d33EfddcPinkChecksvg",
    "d33EfddcPinkChecksvg2",
    "learnFacialAnatomyBotulinumToxinScience",
    "divlpPomBox52",
    "divlpPomImageContainer4",
    "d33EfddcPinkChecksvg3",
    "d33EfddcPinkChecksvg4",
    "smallClassSizeWithDedicated11Support",
    "divlpPomBox55",
    "divlpPomImageContainer5",
    "d33EfddcPinkChecksvg5",
    "d33EfddcPinkChecksvg6",
    "strong",
    "divlpPomImageContainer6",
    "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png",
    "divlpPomImageContainer7",
    "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png",
    "getPricingDetails",
    "divlpPomImageContainer8",
    "_046F157ALogo250X104X01P04X01L000002028Png",
    "span",
    "submitToRequestAdditionalInformation",
    "divlpPomBox33",
    "p",
    "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg",
    "cartRemindersAtThePhoneNumberProvidedConsentIsNotA",
    "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency",
    "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy",
    "policyAndTermsOfService",
    "embedHtml"
  ],
  desktop: [
    "desktop",
    "logo",
    "squeezeNav",
    "squeezeC1H1",
    "squeezeC1H2",
    "form",
    "input",
    "input2",
    "squeezeC1Cta",
    "textInput",
    "textInput2",
    "squeezeC1Disclaimer",
    "squeezeC2Thumbnail",
    "squeezeC2H1",
    "squeezeC2H12",
    "iconValue1",
    "squeezeC2Icon1",
    "squeezeC2Icon1Value1",
    "iconValue2",
    "squeezeC2Icon2",
    "squeezeC2Icon1Value2",
    "iconValue3",
    "squeezeC2Icon3",
    "squeezeC2Icon1Value3",
    "squeezeC2CtaH1",
    "squeezeC2CtaH2",
    "squeezeC2Proof",
    "squeezeC2OfferH1",
    "squeezeC2OfferThumbnail",
    "squeezeC2ValueH1",
    "squeezeC2ValueH2",
    "squeezeC2ValueH3"
  ],
  logo: ["logo"],
  squeezeNav: ["squeezeNav"],
  squeezeC1H1: ["squeezeC1H1"],
  squeezeC1H2: ["squeezeC1H2"],
  form: ["form", "input", "input2", "squeezeC1Cta"],
  input: ["input"],
  input2: ["input2"],
  squeezeC1Cta: ["squeezeC1Cta"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  squeezeC1Disclaimer: ["squeezeC1Disclaimer"],
  squeezeC2Thumbnail: ["squeezeC2Thumbnail"],
  squeezeC2H1: ["squeezeC2H1"],
  squeezeC2H12: ["squeezeC2H12"],
  iconValue1: ["iconValue1", "squeezeC2Icon1", "squeezeC2Icon1Value1"],
  squeezeC2Icon1: ["squeezeC2Icon1"],
  squeezeC2Icon1Value1: ["squeezeC2Icon1Value1"],
  iconValue2: ["iconValue2", "squeezeC2Icon2", "squeezeC2Icon1Value2"],
  squeezeC2Icon2: ["squeezeC2Icon2"],
  squeezeC2Icon1Value2: ["squeezeC2Icon1Value2"],
  iconValue3: ["iconValue3", "squeezeC2Icon3", "squeezeC2Icon1Value3"],
  squeezeC2Icon3: ["squeezeC2Icon3"],
  squeezeC2Icon1Value3: ["squeezeC2Icon1Value3"],
  squeezeC2CtaH1: ["squeezeC2CtaH1"],
  squeezeC2CtaH2: ["squeezeC2CtaH2"],
  squeezeC2Proof: ["squeezeC2Proof"],
  squeezeC2OfferH1: ["squeezeC2OfferH1"],
  squeezeC2OfferThumbnail: ["squeezeC2OfferThumbnail"],
  squeezeC2ValueH1: ["squeezeC2ValueH1"],
  squeezeC2ValueH2: ["squeezeC2ValueH2"],
  squeezeC2ValueH3: ["squeezeC2ValueH3"],
  mobile: [
    "mobile",
    "logo3",
    "squeezeC2Thumbnail2",
    "squeezeC2H13",
    "squeezeC2H14",
    "iconValue4",
    "squeezeC2Icon12",
    "squeezeC2Icon1Value12",
    "iconValue5",
    "squeezeC2Icon22",
    "squeezeC2Icon1Value22",
    "iconValue6",
    "squeezeC2Icon32",
    "squeezeC2Icon1Value32",
    "squeezeC2CtaH12",
    "squeezeC2CtaH22",
    "squeezeC2Proof2",
    "squeezeC2OfferH12",
    "squeezeC2OfferThumbnail2",
    "squeezeC2ValueH12",
    "squeezeC2ValueH22",
    "squeezeC2ValueH32",
    "logo2",
    "squeezeNav2",
    "squeezeC1H12",
    "squeezeC1H22",
    "form2",
    "input3",
    "squeezeC1Field12",
    "input4",
    "squeezeC1Field22",
    "squeezeC1Cta2",
    "textInput3",
    "textInput4",
    "squeezeC1Disclaimer2"
  ],
  logo3: ["logo3"],
  squeezeC2Thumbnail2: ["squeezeC2Thumbnail2"],
  squeezeC2H13: ["squeezeC2H13"],
  squeezeC2H14: ["squeezeC2H14"],
  iconValue4: ["iconValue4", "squeezeC2Icon12", "squeezeC2Icon1Value12"],
  squeezeC2Icon12: ["squeezeC2Icon12"],
  squeezeC2Icon1Value12: ["squeezeC2Icon1Value12"],
  iconValue5: ["iconValue5", "squeezeC2Icon22", "squeezeC2Icon1Value22"],
  squeezeC2Icon22: ["squeezeC2Icon22"],
  squeezeC2Icon1Value22: ["squeezeC2Icon1Value22"],
  iconValue6: ["iconValue6", "squeezeC2Icon32", "squeezeC2Icon1Value32"],
  squeezeC2Icon32: ["squeezeC2Icon32"],
  squeezeC2Icon1Value32: ["squeezeC2Icon1Value32"],
  squeezeC2CtaH12: ["squeezeC2CtaH12"],
  squeezeC2CtaH22: ["squeezeC2CtaH22"],
  squeezeC2Proof2: ["squeezeC2Proof2"],
  squeezeC2OfferH12: ["squeezeC2OfferH12"],
  squeezeC2OfferThumbnail2: ["squeezeC2OfferThumbnail2"],
  squeezeC2ValueH12: ["squeezeC2ValueH12"],
  squeezeC2ValueH22: ["squeezeC2ValueH22"],
  squeezeC2ValueH32: ["squeezeC2ValueH32"],
  logo2: ["logo2"],
  squeezeNav2: ["squeezeNav2"],
  squeezeC1H12: ["squeezeC1H12"],
  squeezeC1H22: ["squeezeC1H22"],
  form2: [
    "form2",
    "input3",
    "squeezeC1Field12",
    "input4",
    "squeezeC1Field22",
    "squeezeC1Cta2"
  ],
  input3: ["input3", "squeezeC1Field12"],
  squeezeC1Field12: ["squeezeC1Field12"],
  input4: ["input4", "squeezeC1Field22"],
  squeezeC1Field22: ["squeezeC1Field22"],
  squeezeC1Cta2: ["squeezeC1Cta2"],
  textInput3: ["textInput3"],
  textInput4: ["textInput4"],
  squeezeC1Disclaimer2: ["squeezeC1Disclaimer2"],
  discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4: [
    "discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4",
    "divlpPomRoot",
    "divlpPomBlock11",
    "divlpPomBlock21",
    "divlpPositionedContent",
    "divlpPomBox32",
    "divlpPomForm19",
    "inputfirstname",
    "divplaceholder",
    "yourFirstName",
    "inputlastname",
    "divplaceholder2",
    "yourLastName",
    "inputemail",
    "divplaceholder3",
    "yourEmailAddress",
    "inputphone",
    "divplaceholder4",
    "yourPhoneNumber",
    "divcontainerQualification",
    "yourQualification",
    "selectqualification",
    "div",
    "nurseRnOrNp",
    "buttonlpPomButton20",
    "_continue",
    "divlpPomBox26",
    "divlpPomImageContainer",
    "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png",
    "divlpPomImageContainer2",
    "c510588BTrainingCenterGifPreview2Gif",
    "divlpPomBox46",
    "divlpPomImageContainer3",
    "d33EfddcPinkChecksvg",
    "d33EfddcPinkChecksvg2",
    "learnFacialAnatomyBotulinumToxinScience",
    "divlpPomBox52",
    "divlpPomImageContainer4",
    "d33EfddcPinkChecksvg3",
    "d33EfddcPinkChecksvg4",
    "smallClassSizeWithDedicated11Support",
    "divlpPomBox55",
    "divlpPomImageContainer5",
    "d33EfddcPinkChecksvg5",
    "d33EfddcPinkChecksvg6",
    "strong",
    "divlpPomImageContainer6",
    "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png",
    "divlpPomImageContainer7",
    "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png",
    "getPricingDetails",
    "divlpPomImageContainer8",
    "_046F157ALogo250X104X01P04X01L000002028Png",
    "span",
    "submitToRequestAdditionalInformation",
    "divlpPomBox33",
    "p",
    "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg",
    "cartRemindersAtThePhoneNumberProvidedConsentIsNotA",
    "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency",
    "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy",
    "policyAndTermsOfService"
  ],
  divlpPomRoot: [
    "divlpPomRoot",
    "divlpPomBlock11",
    "divlpPomBlock21",
    "divlpPositionedContent",
    "divlpPomBox32",
    "divlpPomForm19",
    "inputfirstname",
    "divplaceholder",
    "yourFirstName",
    "inputlastname",
    "divplaceholder2",
    "yourLastName",
    "inputemail",
    "divplaceholder3",
    "yourEmailAddress",
    "inputphone",
    "divplaceholder4",
    "yourPhoneNumber",
    "divcontainerQualification",
    "yourQualification",
    "selectqualification",
    "div",
    "nurseRnOrNp",
    "buttonlpPomButton20",
    "_continue",
    "divlpPomBox26",
    "divlpPomImageContainer",
    "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png",
    "divlpPomImageContainer2",
    "c510588BTrainingCenterGifPreview2Gif",
    "divlpPomBox46",
    "divlpPomImageContainer3",
    "d33EfddcPinkChecksvg",
    "d33EfddcPinkChecksvg2",
    "learnFacialAnatomyBotulinumToxinScience",
    "divlpPomBox52",
    "divlpPomImageContainer4",
    "d33EfddcPinkChecksvg3",
    "d33EfddcPinkChecksvg4",
    "smallClassSizeWithDedicated11Support",
    "divlpPomBox55",
    "divlpPomImageContainer5",
    "d33EfddcPinkChecksvg5",
    "d33EfddcPinkChecksvg6",
    "strong",
    "divlpPomImageContainer6",
    "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png",
    "divlpPomImageContainer7",
    "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png",
    "getPricingDetails",
    "divlpPomImageContainer8",
    "_046F157ALogo250X104X01P04X01L000002028Png",
    "span",
    "submitToRequestAdditionalInformation",
    "divlpPomBox33",
    "p",
    "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg",
    "cartRemindersAtThePhoneNumberProvidedConsentIsNotA",
    "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency",
    "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy",
    "policyAndTermsOfService"
  ],
  divlpPomBlock11: ["divlpPomBlock11"],
  divlpPomBlock21: ["divlpPomBlock21"],
  divlpPositionedContent: [
    "divlpPositionedContent",
    "divlpPomBox32",
    "divlpPomForm19",
    "inputfirstname",
    "divplaceholder",
    "yourFirstName",
    "inputlastname",
    "divplaceholder2",
    "yourLastName",
    "inputemail",
    "divplaceholder3",
    "yourEmailAddress",
    "inputphone",
    "divplaceholder4",
    "yourPhoneNumber",
    "divcontainerQualification",
    "yourQualification",
    "selectqualification",
    "div",
    "nurseRnOrNp",
    "buttonlpPomButton20",
    "_continue",
    "divlpPomBox26",
    "divlpPomImageContainer",
    "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png",
    "divlpPomImageContainer2",
    "c510588BTrainingCenterGifPreview2Gif",
    "divlpPomBox46",
    "divlpPomImageContainer3",
    "d33EfddcPinkChecksvg",
    "d33EfddcPinkChecksvg2",
    "learnFacialAnatomyBotulinumToxinScience",
    "divlpPomBox52",
    "divlpPomImageContainer4",
    "d33EfddcPinkChecksvg3",
    "d33EfddcPinkChecksvg4",
    "smallClassSizeWithDedicated11Support",
    "divlpPomBox55",
    "divlpPomImageContainer5",
    "d33EfddcPinkChecksvg5",
    "d33EfddcPinkChecksvg6",
    "strong",
    "divlpPomImageContainer6",
    "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png",
    "divlpPomImageContainer7",
    "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png",
    "getPricingDetails",
    "divlpPomImageContainer8",
    "_046F157ALogo250X104X01P04X01L000002028Png",
    "span",
    "submitToRequestAdditionalInformation",
    "divlpPomBox33",
    "p",
    "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg",
    "cartRemindersAtThePhoneNumberProvidedConsentIsNotA",
    "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency",
    "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy",
    "policyAndTermsOfService"
  ],
  divlpPomBox32: [
    "divlpPomBox32",
    "divlpPomForm19",
    "inputfirstname",
    "divplaceholder",
    "yourFirstName",
    "inputlastname",
    "divplaceholder2",
    "yourLastName",
    "inputemail",
    "divplaceholder3",
    "yourEmailAddress",
    "inputphone",
    "divplaceholder4",
    "yourPhoneNumber",
    "divcontainerQualification",
    "yourQualification",
    "selectqualification",
    "div",
    "nurseRnOrNp",
    "buttonlpPomButton20",
    "_continue"
  ],
  divlpPomForm19: [
    "divlpPomForm19",
    "inputfirstname",
    "divplaceholder",
    "yourFirstName",
    "inputlastname",
    "divplaceholder2",
    "yourLastName",
    "inputemail",
    "divplaceholder3",
    "yourEmailAddress",
    "inputphone",
    "divplaceholder4",
    "yourPhoneNumber",
    "divcontainerQualification",
    "yourQualification",
    "selectqualification",
    "div",
    "nurseRnOrNp",
    "buttonlpPomButton20",
    "_continue"
  ],
  inputfirstname: ["inputfirstname", "divplaceholder", "yourFirstName"],
  divplaceholder: ["divplaceholder", "yourFirstName"],
  yourFirstName: ["yourFirstName"],
  inputlastname: ["inputlastname", "divplaceholder2", "yourLastName"],
  divplaceholder2: ["divplaceholder2", "yourLastName"],
  yourLastName: ["yourLastName"],
  inputemail: ["inputemail", "divplaceholder3", "yourEmailAddress"],
  divplaceholder3: ["divplaceholder3", "yourEmailAddress"],
  yourEmailAddress: ["yourEmailAddress"],
  inputphone: ["inputphone", "divplaceholder4", "yourPhoneNumber"],
  divplaceholder4: ["divplaceholder4", "yourPhoneNumber"],
  yourPhoneNumber: ["yourPhoneNumber"],
  divcontainerQualification: [
    "divcontainerQualification",
    "yourQualification",
    "selectqualification",
    "div",
    "nurseRnOrNp"
  ],
  yourQualification: ["yourQualification"],
  selectqualification: ["selectqualification", "div", "nurseRnOrNp"],
  div: ["div", "nurseRnOrNp"],
  nurseRnOrNp: ["nurseRnOrNp"],
  buttonlpPomButton20: ["buttonlpPomButton20", "_continue"],
  _continue: ["_continue"],
  divlpPomBox26: [
    "divlpPomBox26",
    "divlpPomImageContainer",
    "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png",
    "divlpPomImageContainer2",
    "c510588BTrainingCenterGifPreview2Gif",
    "divlpPomBox46",
    "divlpPomImageContainer3",
    "d33EfddcPinkChecksvg",
    "d33EfddcPinkChecksvg2",
    "learnFacialAnatomyBotulinumToxinScience",
    "divlpPomBox52",
    "divlpPomImageContainer4",
    "d33EfddcPinkChecksvg3",
    "d33EfddcPinkChecksvg4",
    "smallClassSizeWithDedicated11Support",
    "divlpPomBox55",
    "divlpPomImageContainer5",
    "d33EfddcPinkChecksvg5",
    "d33EfddcPinkChecksvg6",
    "strong",
    "divlpPomImageContainer6",
    "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png"
  ],
  divlpPomImageContainer: [
    "divlpPomImageContainer",
    "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png"
  ],
  _6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png: [
    "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png"
  ],
  divlpPomImageContainer2: [
    "divlpPomImageContainer2",
    "c510588BTrainingCenterGifPreview2Gif"
  ],
  c510588BTrainingCenterGifPreview2Gif: [
    "c510588BTrainingCenterGifPreview2Gif"
  ],
  divlpPomBox46: [
    "divlpPomBox46",
    "divlpPomImageContainer3",
    "d33EfddcPinkChecksvg",
    "d33EfddcPinkChecksvg2",
    "learnFacialAnatomyBotulinumToxinScience"
  ],
  divlpPomImageContainer3: [
    "divlpPomImageContainer3",
    "d33EfddcPinkChecksvg",
    "d33EfddcPinkChecksvg2"
  ],
  d33EfddcPinkChecksvg: ["d33EfddcPinkChecksvg", "d33EfddcPinkChecksvg2"],
  d33EfddcPinkChecksvg2: ["d33EfddcPinkChecksvg2"],
  learnFacialAnatomyBotulinumToxinScience: [
    "learnFacialAnatomyBotulinumToxinScience"
  ],
  divlpPomBox52: [
    "divlpPomBox52",
    "divlpPomImageContainer4",
    "d33EfddcPinkChecksvg3",
    "d33EfddcPinkChecksvg4",
    "smallClassSizeWithDedicated11Support"
  ],
  divlpPomImageContainer4: [
    "divlpPomImageContainer4",
    "d33EfddcPinkChecksvg3",
    "d33EfddcPinkChecksvg4"
  ],
  d33EfddcPinkChecksvg3: ["d33EfddcPinkChecksvg3", "d33EfddcPinkChecksvg4"],
  d33EfddcPinkChecksvg4: ["d33EfddcPinkChecksvg4"],
  smallClassSizeWithDedicated11Support: [
    "smallClassSizeWithDedicated11Support"
  ],
  divlpPomBox55: [
    "divlpPomBox55",
    "divlpPomImageContainer5",
    "d33EfddcPinkChecksvg5",
    "d33EfddcPinkChecksvg6",
    "strong"
  ],
  divlpPomImageContainer5: [
    "divlpPomImageContainer5",
    "d33EfddcPinkChecksvg5",
    "d33EfddcPinkChecksvg6"
  ],
  d33EfddcPinkChecksvg5: ["d33EfddcPinkChecksvg5", "d33EfddcPinkChecksvg6"],
  d33EfddcPinkChecksvg6: ["d33EfddcPinkChecksvg6"],
  strong: ["strong"],
  divlpPomImageContainer6: [
    "divlpPomImageContainer6",
    "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png"
  ],
  _3628940ACheckoutTrainingCenterPart210El08G000000000000028Png: [
    "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png"
  ],
  divlpPomImageContainer7: [
    "divlpPomImageContainer7",
    "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png"
  ],
  c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png: [
    "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png"
  ],
  getPricingDetails: ["getPricingDetails"],
  divlpPomImageContainer8: [
    "divlpPomImageContainer8",
    "_046F157ALogo250X104X01P04X01L000002028Png"
  ],
  _046F157ALogo250X104X01P04X01L000002028Png: [
    "_046F157ALogo250X104X01P04X01L000002028Png"
  ],
  span: ["span"],
  submitToRequestAdditionalInformation: [
    "submitToRequestAdditionalInformation"
  ],
  divlpPomBox33: ["divlpPomBox33"],
  p: [
    "p",
    "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg",
    "cartRemindersAtThePhoneNumberProvidedConsentIsNotA",
    "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency",
    "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy",
    "policyAndTermsOfService"
  ],
  iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg: [
    "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg"
  ],
  cartRemindersAtThePhoneNumberProvidedConsentIsNotA: [
    "cartRemindersAtThePhoneNumberProvidedConsentIsNotA"
  ],
  conditionToPurchaseMsgDataRatesMayApplyMsgFrequency: [
    "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency"
  ],
  variesReplyHelpForHelpAndStopToCancelViewOurPrivacy: [
    "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy"
  ],
  policyAndTermsOfService: ["policyAndTermsOfService"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  desktop: "div";
  logo: typeof PlasmicImg__;
  squeezeNav: "div";
  squeezeC1H1: "div";
  squeezeC1H2: "div";
  form: typeof FormWrapper;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  squeezeC1Cta: "div";
  textInput: typeof TextInput;
  textInput2: typeof TextInput;
  squeezeC1Disclaimer: "div";
  squeezeC2Thumbnail: typeof PlasmicImg__;
  squeezeC2H1: "div";
  squeezeC2H12: "div";
  iconValue1: "div";
  squeezeC2Icon1: typeof PlasmicImg__;
  squeezeC2Icon1Value1: "div";
  iconValue2: "div";
  squeezeC2Icon2: typeof PlasmicImg__;
  squeezeC2Icon1Value2: "div";
  iconValue3: "div";
  squeezeC2Icon3: typeof PlasmicImg__;
  squeezeC2Icon1Value3: "div";
  squeezeC2CtaH1: "div";
  squeezeC2CtaH2: "div";
  squeezeC2Proof: "div";
  squeezeC2OfferH1: "div";
  squeezeC2OfferThumbnail: typeof PlasmicImg__;
  squeezeC2ValueH1: "div";
  squeezeC2ValueH2: "div";
  squeezeC2ValueH3: "div";
  mobile: "div";
  logo3: typeof PlasmicImg__;
  squeezeC2Thumbnail2: typeof PlasmicImg__;
  squeezeC2H13: "div";
  squeezeC2H14: "div";
  iconValue4: "div";
  squeezeC2Icon12: typeof PlasmicImg__;
  squeezeC2Icon1Value12: "div";
  iconValue5: "div";
  squeezeC2Icon22: typeof PlasmicImg__;
  squeezeC2Icon1Value22: "div";
  iconValue6: "div";
  squeezeC2Icon32: typeof PlasmicImg__;
  squeezeC2Icon1Value32: "div";
  squeezeC2CtaH12: "div";
  squeezeC2CtaH22: "div";
  squeezeC2Proof2: "div";
  squeezeC2OfferH12: "div";
  squeezeC2OfferThumbnail2: typeof PlasmicImg__;
  squeezeC2ValueH12: "div";
  squeezeC2ValueH22: "div";
  squeezeC2ValueH32: "div";
  logo2: typeof PlasmicImg__;
  squeezeNav2: "div";
  squeezeC1H12: "div";
  squeezeC1H22: "div";
  form2: typeof FormWrapper;
  input3: typeof AntdInput;
  squeezeC1Field12: "div";
  input4: typeof AntdInput;
  squeezeC1Field22: "div";
  squeezeC1Cta2: "div";
  textInput3: typeof TextInput;
  textInput4: typeof TextInput;
  squeezeC1Disclaimer2: "div";
  discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4: "div";
  divlpPomRoot: "div";
  divlpPomBlock11: "div";
  divlpPomBlock21: "div";
  divlpPositionedContent: "div";
  divlpPomBox32: "div";
  divlpPomForm19: "div";
  inputfirstname: "div";
  divplaceholder: "div";
  yourFirstName: "div";
  inputlastname: "div";
  divplaceholder2: "div";
  yourLastName: "div";
  inputemail: "div";
  divplaceholder3: "div";
  yourEmailAddress: "div";
  inputphone: "div";
  divplaceholder4: "div";
  yourPhoneNumber: "div";
  divcontainerQualification: "div";
  yourQualification: "div";
  selectqualification: "div";
  div: "div";
  nurseRnOrNp: "div";
  buttonlpPomButton20: "div";
  _continue: "div";
  divlpPomBox26: "div";
  divlpPomImageContainer: "div";
  _6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png: "div";
  divlpPomImageContainer2: "div";
  c510588BTrainingCenterGifPreview2Gif: "div";
  divlpPomBox46: "div";
  divlpPomImageContainer3: "div";
  d33EfddcPinkChecksvg: "div";
  d33EfddcPinkChecksvg2: "div";
  learnFacialAnatomyBotulinumToxinScience: "div";
  divlpPomBox52: "div";
  divlpPomImageContainer4: "div";
  d33EfddcPinkChecksvg3: "div";
  d33EfddcPinkChecksvg4: "div";
  smallClassSizeWithDedicated11Support: "div";
  divlpPomBox55: "div";
  divlpPomImageContainer5: "div";
  d33EfddcPinkChecksvg5: "div";
  d33EfddcPinkChecksvg6: "div";
  strong: "div";
  divlpPomImageContainer6: "div";
  _3628940ACheckoutTrainingCenterPart210El08G000000000000028Png: "div";
  divlpPomImageContainer7: "div";
  c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png: "div";
  getPricingDetails: "div";
  divlpPomImageContainer8: "div";
  _046F157ALogo250X104X01P04X01L000002028Png: "div";
  span: "div";
  submitToRequestAdditionalInformation: "div";
  divlpPomBox33: "div";
  p: "div";
  iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg: "div";
  cartRemindersAtThePhoneNumberProvidedConsentIsNotA: "div";
  conditionToPurchaseMsgDataRatesMayApplyMsgFrequency: "div";
  variesReplyHelpForHelpAndStopToCancelViewOurPrivacy: "div";
  policyAndTermsOfService: "div";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSqueezeVariant2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSqueezeVariant2__VariantsArgs;
    args?: PlasmicSqueezeVariant2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSqueezeVariant2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSqueezeVariant2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSqueezeVariant2__ArgProps,
          internalVariantPropNames: PlasmicSqueezeVariant2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSqueezeVariant2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSqueezeVariant2";
  } else {
    func.displayName = `PlasmicSqueezeVariant2.${nodeName}`;
  }
  return func;
}

export const PlasmicSqueezeVariant2 = Object.assign(
  // Top-level PlasmicSqueezeVariant2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    desktop: makeNodeComponent("desktop"),
    logo: makeNodeComponent("logo"),
    squeezeNav: makeNodeComponent("squeezeNav"),
    squeezeC1H1: makeNodeComponent("squeezeC1H1"),
    squeezeC1H2: makeNodeComponent("squeezeC1H2"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    squeezeC1Cta: makeNodeComponent("squeezeC1Cta"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    squeezeC1Disclaimer: makeNodeComponent("squeezeC1Disclaimer"),
    squeezeC2Thumbnail: makeNodeComponent("squeezeC2Thumbnail"),
    squeezeC2H1: makeNodeComponent("squeezeC2H1"),
    squeezeC2H12: makeNodeComponent("squeezeC2H12"),
    iconValue1: makeNodeComponent("iconValue1"),
    squeezeC2Icon1: makeNodeComponent("squeezeC2Icon1"),
    squeezeC2Icon1Value1: makeNodeComponent("squeezeC2Icon1Value1"),
    iconValue2: makeNodeComponent("iconValue2"),
    squeezeC2Icon2: makeNodeComponent("squeezeC2Icon2"),
    squeezeC2Icon1Value2: makeNodeComponent("squeezeC2Icon1Value2"),
    iconValue3: makeNodeComponent("iconValue3"),
    squeezeC2Icon3: makeNodeComponent("squeezeC2Icon3"),
    squeezeC2Icon1Value3: makeNodeComponent("squeezeC2Icon1Value3"),
    squeezeC2CtaH1: makeNodeComponent("squeezeC2CtaH1"),
    squeezeC2CtaH2: makeNodeComponent("squeezeC2CtaH2"),
    squeezeC2Proof: makeNodeComponent("squeezeC2Proof"),
    squeezeC2OfferH1: makeNodeComponent("squeezeC2OfferH1"),
    squeezeC2OfferThumbnail: makeNodeComponent("squeezeC2OfferThumbnail"),
    squeezeC2ValueH1: makeNodeComponent("squeezeC2ValueH1"),
    squeezeC2ValueH2: makeNodeComponent("squeezeC2ValueH2"),
    squeezeC2ValueH3: makeNodeComponent("squeezeC2ValueH3"),
    mobile: makeNodeComponent("mobile"),
    logo3: makeNodeComponent("logo3"),
    squeezeC2Thumbnail2: makeNodeComponent("squeezeC2Thumbnail2"),
    squeezeC2H13: makeNodeComponent("squeezeC2H13"),
    squeezeC2H14: makeNodeComponent("squeezeC2H14"),
    iconValue4: makeNodeComponent("iconValue4"),
    squeezeC2Icon12: makeNodeComponent("squeezeC2Icon12"),
    squeezeC2Icon1Value12: makeNodeComponent("squeezeC2Icon1Value12"),
    iconValue5: makeNodeComponent("iconValue5"),
    squeezeC2Icon22: makeNodeComponent("squeezeC2Icon22"),
    squeezeC2Icon1Value22: makeNodeComponent("squeezeC2Icon1Value22"),
    iconValue6: makeNodeComponent("iconValue6"),
    squeezeC2Icon32: makeNodeComponent("squeezeC2Icon32"),
    squeezeC2Icon1Value32: makeNodeComponent("squeezeC2Icon1Value32"),
    squeezeC2CtaH12: makeNodeComponent("squeezeC2CtaH12"),
    squeezeC2CtaH22: makeNodeComponent("squeezeC2CtaH22"),
    squeezeC2Proof2: makeNodeComponent("squeezeC2Proof2"),
    squeezeC2OfferH12: makeNodeComponent("squeezeC2OfferH12"),
    squeezeC2OfferThumbnail2: makeNodeComponent("squeezeC2OfferThumbnail2"),
    squeezeC2ValueH12: makeNodeComponent("squeezeC2ValueH12"),
    squeezeC2ValueH22: makeNodeComponent("squeezeC2ValueH22"),
    squeezeC2ValueH32: makeNodeComponent("squeezeC2ValueH32"),
    logo2: makeNodeComponent("logo2"),
    squeezeNav2: makeNodeComponent("squeezeNav2"),
    squeezeC1H12: makeNodeComponent("squeezeC1H12"),
    squeezeC1H22: makeNodeComponent("squeezeC1H22"),
    form2: makeNodeComponent("form2"),
    input3: makeNodeComponent("input3"),
    squeezeC1Field12: makeNodeComponent("squeezeC1Field12"),
    input4: makeNodeComponent("input4"),
    squeezeC1Field22: makeNodeComponent("squeezeC1Field22"),
    squeezeC1Cta2: makeNodeComponent("squeezeC1Cta2"),
    textInput3: makeNodeComponent("textInput3"),
    textInput4: makeNodeComponent("textInput4"),
    squeezeC1Disclaimer2: makeNodeComponent("squeezeC1Disclaimer2"),
    discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4:
      makeNodeComponent(
        "discoverbeautyfixmedspacomByHtmltodesignFreeVersion24042023190333Gmt4"
      ),
    divlpPomRoot: makeNodeComponent("divlpPomRoot"),
    divlpPomBlock11: makeNodeComponent("divlpPomBlock11"),
    divlpPomBlock21: makeNodeComponent("divlpPomBlock21"),
    divlpPositionedContent: makeNodeComponent("divlpPositionedContent"),
    divlpPomBox32: makeNodeComponent("divlpPomBox32"),
    divlpPomForm19: makeNodeComponent("divlpPomForm19"),
    inputfirstname: makeNodeComponent("inputfirstname"),
    divplaceholder: makeNodeComponent("divplaceholder"),
    yourFirstName: makeNodeComponent("yourFirstName"),
    inputlastname: makeNodeComponent("inputlastname"),
    divplaceholder2: makeNodeComponent("divplaceholder2"),
    yourLastName: makeNodeComponent("yourLastName"),
    inputemail: makeNodeComponent("inputemail"),
    divplaceholder3: makeNodeComponent("divplaceholder3"),
    yourEmailAddress: makeNodeComponent("yourEmailAddress"),
    inputphone: makeNodeComponent("inputphone"),
    divplaceholder4: makeNodeComponent("divplaceholder4"),
    yourPhoneNumber: makeNodeComponent("yourPhoneNumber"),
    divcontainerQualification: makeNodeComponent("divcontainerQualification"),
    yourQualification: makeNodeComponent("yourQualification"),
    selectqualification: makeNodeComponent("selectqualification"),
    div: makeNodeComponent("div"),
    nurseRnOrNp: makeNodeComponent("nurseRnOrNp"),
    buttonlpPomButton20: makeNodeComponent("buttonlpPomButton20"),
    _continue: makeNodeComponent("_continue"),
    divlpPomBox26: makeNodeComponent("divlpPomBox26"),
    divlpPomImageContainer: makeNodeComponent("divlpPomImageContainer"),
    _6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png:
      makeNodeComponent(
        "_6D1D5E84CheckoutTrainingCenterPart1110El04G000000000000028Png"
      ),
    divlpPomImageContainer2: makeNodeComponent("divlpPomImageContainer2"),
    c510588BTrainingCenterGifPreview2Gif: makeNodeComponent(
      "c510588BTrainingCenterGifPreview2Gif"
    ),
    divlpPomBox46: makeNodeComponent("divlpPomBox46"),
    divlpPomImageContainer3: makeNodeComponent("divlpPomImageContainer3"),
    d33EfddcPinkChecksvg: makeNodeComponent("d33EfddcPinkChecksvg"),
    d33EfddcPinkChecksvg2: makeNodeComponent("d33EfddcPinkChecksvg2"),
    learnFacialAnatomyBotulinumToxinScience: makeNodeComponent(
      "learnFacialAnatomyBotulinumToxinScience"
    ),
    divlpPomBox52: makeNodeComponent("divlpPomBox52"),
    divlpPomImageContainer4: makeNodeComponent("divlpPomImageContainer4"),
    d33EfddcPinkChecksvg3: makeNodeComponent("d33EfddcPinkChecksvg3"),
    d33EfddcPinkChecksvg4: makeNodeComponent("d33EfddcPinkChecksvg4"),
    smallClassSizeWithDedicated11Support: makeNodeComponent(
      "smallClassSizeWithDedicated11Support"
    ),
    divlpPomBox55: makeNodeComponent("divlpPomBox55"),
    divlpPomImageContainer5: makeNodeComponent("divlpPomImageContainer5"),
    d33EfddcPinkChecksvg5: makeNodeComponent("d33EfddcPinkChecksvg5"),
    d33EfddcPinkChecksvg6: makeNodeComponent("d33EfddcPinkChecksvg6"),
    strong: makeNodeComponent("strong"),
    divlpPomImageContainer6: makeNodeComponent("divlpPomImageContainer6"),
    _3628940ACheckoutTrainingCenterPart210El08G000000000000028Png:
      makeNodeComponent(
        "_3628940ACheckoutTrainingCenterPart210El08G000000000000028Png"
      ),
    divlpPomImageContainer7: makeNodeComponent("divlpPomImageContainer7"),
    c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png: makeNodeComponent(
      "c38C71DdBeautyfixLogoFullWht105S00V000000000000028Png"
    ),
    getPricingDetails: makeNodeComponent("getPricingDetails"),
    divlpPomImageContainer8: makeNodeComponent("divlpPomImageContainer8"),
    _046F157ALogo250X104X01P04X01L000002028Png: makeNodeComponent(
      "_046F157ALogo250X104X01P04X01L000002028Png"
    ),
    span: makeNodeComponent("span"),
    submitToRequestAdditionalInformation: makeNodeComponent(
      "submitToRequestAdditionalInformation"
    ),
    divlpPomBox33: makeNodeComponent("divlpPomBox33"),
    p: makeNodeComponent("p"),
    iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg: makeNodeComponent(
      "iAgreeToReceiveRecurringAutomatedMarketingTextMessagesEg"
    ),
    cartRemindersAtThePhoneNumberProvidedConsentIsNotA: makeNodeComponent(
      "cartRemindersAtThePhoneNumberProvidedConsentIsNotA"
    ),
    conditionToPurchaseMsgDataRatesMayApplyMsgFrequency: makeNodeComponent(
      "conditionToPurchaseMsgDataRatesMayApplyMsgFrequency"
    ),
    variesReplyHelpForHelpAndStopToCancelViewOurPrivacy: makeNodeComponent(
      "variesReplyHelpForHelpAndStopToCancelViewOurPrivacy"
    ),
    policyAndTermsOfService: makeNodeComponent("policyAndTermsOfService"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicSqueezeVariant2
    internalVariantProps: PlasmicSqueezeVariant2__VariantProps,
    internalArgProps: PlasmicSqueezeVariant2__ArgProps
  }
);

export default PlasmicSqueezeVariant2;
/* prettier-ignore-end */
