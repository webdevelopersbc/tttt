// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dMaiZmvKdpJ4pWYeCQn3zc
// Component: tJHuk0k3k8hzGd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { PlasmicHead } from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariants_365VKlwMc2UpC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 365v_KlwMc2up-c/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_legacy_feed_page_designs.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import sty from "./PlasmicBodyArticle2.module.css"; // plasmic-import: tJHuk0k3k8hzGd/css

createPlasmicElementProxy;

export type PlasmicBodyArticle2__VariantMembers = {};
export type PlasmicBodyArticle2__VariantsArgs = {};
type VariantPropType = keyof PlasmicBodyArticle2__VariantsArgs;
export const PlasmicBodyArticle2__VariantProps = new Array<VariantPropType>();

export type PlasmicBodyArticle2__ArgsType = {};
type ArgPropType = keyof PlasmicBodyArticle2__ArgsType;
export const PlasmicBodyArticle2__ArgProps = new Array<ArgPropType>();

export type PlasmicBodyArticle2__OverridesType = {
  article1Body?: Flex__<"div">;
  heroHeadline?: Flex__<"div">;
  heroSubHeadline?: Flex__<"div">;
  heroImage?: Flex__<typeof PlasmicImg__>;
  paragraph1?: Flex__<"div">;
  image1?: Flex__<typeof PlasmicImg__>;
  paragraph2?: Flex__<"div">;
  image2?: Flex__<typeof PlasmicImg__>;
  paragraph3?: Flex__<"div">;
  image3?: Flex__<typeof PlasmicImg__>;
  paragraph4?: Flex__<"div">;
  image4?: Flex__<typeof PlasmicImg__>;
  paragraph5?: Flex__<"div">;
  image5?: Flex__<typeof PlasmicImg__>;
  paragraph6?: Flex__<"div">;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
  image6?: Flex__<typeof PlasmicImg__>;
  paragraph7?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  columns?: Flex__<"div">;
  image7?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultBodyArticle2Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBodyArticle2__RenderFunc(props: {
  variants: PlasmicBodyArticle2__VariantsArgs;
  args: PlasmicBodyArticle2__ArgsType;
  overrides: PlasmicBodyArticle2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_365VKlwMc2UpC()
  });

  return (
    <div
      data-plasmic-name={"article1Body"}
      data-plasmic-override={overrides.article1Body}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.article1Body
      )}
    >
      <div
        data-plasmic-name={"heroHeadline"}
        data-plasmic-override={overrides.heroHeadline}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.heroHeadline
        )}
      >
        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
          <div
            className={projectcss.__wab_expr_html_text}
            dangerouslySetInnerHTML={{
              __html: (() => {
                try {
                  return $ctx.fetchDyanamicData.records[0].fields.heroHeadline;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Enter some text";
                  }
                  throw e;
                }
              })()
            }}
          />
        ) : (
          <div
            className={projectcss.__wab_expr_html_text}
            dangerouslySetInnerHTML={{
              __html: (() => {
                try {
                  return $ctx.fetchDyanamicData.records[0].fields.heroHeadline;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Enter some text";
                  }
                  throw e;
                }
              })()
            }}
          />
        )}
      </div>
      <div
        data-plasmic-name={"heroSubHeadline"}
        data-plasmic-override={overrides.heroSubHeadline}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.heroSubHeadline
        )}
      >
        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
          <div
            className={projectcss.__wab_expr_html_text}
            dangerouslySetInnerHTML={{
              __html: (() => {
                try {
                  return $ctx.fetchDyanamicData.records[0].fields
                    .heroSubHeadline;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Enter some text";
                  }
                  throw e;
                }
              })()
            }}
          />
        ) : (
          <div
            className={projectcss.__wab_expr_html_text}
            dangerouslySetInnerHTML={{
              __html: (() => {
                try {
                  return $ctx.fetchDyanamicData.records[0].fields
                    .heroSubHeadline;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Enter some text";
                  }
                  throw e;
                }
              })()
            }}
          />
        )}
      </div>
      <PlasmicLink__
        className={classNames(projectcss.all, projectcss.a, sty.link__hPvWm)}
        component={Link}
        href={(() => {
          try {
            return $ctx.fetchDyanamicData.records[0].fields["Step 2 URL"];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
      >
        <PlasmicImg__
          data-plasmic-name={"heroImage"}
          data-plasmic-override={overrides.heroImage}
          alt={""}
          className={classNames(sty.heroImage)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "auto" : "auto"
          }
          displayMaxHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "400px"
              : "400px"
          }
          displayMaxWidth={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "100%" : "100%"
          }
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "354px"
              : "750px"
          }
          loading={"lazy"}
          src={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.heroImage[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.heroImage[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
          }
        />
      </PlasmicLink__>
      <div
        data-plasmic-name={"paragraph1"}
        data-plasmic-override={overrides.paragraph1}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.paragraph1
        )}
      >
        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
          <React.Fragment>
            {(() => {
              try {
                return $ctx.fetchedData.records[0].fields.paragraph1;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Enter some text";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        ) : (
          <React.Fragment>
            {(() => {
              try {
                return $ctx.fetchedData.records[0].fields.paragraph1;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Enter some text";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        )}
      </div>
      <PlasmicLink__
        className={classNames(projectcss.all, projectcss.a, sty.link__hWnSz)}
        component={Link}
        href={(() => {
          try {
            return $ctx.fetchDyanamicData.records[0].fields["Step 2 URL"];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
      >
        <PlasmicImg__
          data-plasmic-name={"image1"}
          data-plasmic-override={overrides.image1}
          alt={""}
          className={classNames(sty.image1)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "auto" : "auto"
          }
          displayMaxHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "400px"
              : "400px"
          }
          displayMaxWidth={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "100%" : "100%"
          }
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "354px"
              : "750px"
          }
          loading={"lazy"}
          src={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.image1[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.image1[0].url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
          }
        />
      </PlasmicLink__>
      <div
        data-plasmic-name={"paragraph2"}
        data-plasmic-override={overrides.paragraph2}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.paragraph2
        )}
      >
        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
          <React.Fragment>
            {(() => {
              try {
                return $ctx.fetchedData.records[0].fields.paragraph2;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Enter some text";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        ) : (
          <React.Fragment>
            {(() => {
              try {
                return $ctx.fetchedData.records[0].fields.paragraph2;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Enter some text";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        )}
      </div>
      <PlasmicLink__
        className={classNames(projectcss.all, projectcss.a, sty.link__tJd8X)}
        component={Link}
        href={(() => {
          try {
            return $ctx.fetchDyanamicData.records[0].fields["Step 2 URL"];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
      >
        <PlasmicImg__
          data-plasmic-name={"image2"}
          data-plasmic-override={overrides.image2}
          alt={""}
          className={classNames(sty.image2)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "auto" : "auto"
          }
          displayMaxHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "300px"
              : "400px"
          }
          displayMaxWidth={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "100%" : "100%"
          }
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "354px"
              : "750px"
          }
          loading={"lazy"}
          src={(() => {
            try {
              return $ctx.fetchedData.records[0].fields.image2[0].url;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </PlasmicLink__>
      <div
        data-plasmic-name={"paragraph3"}
        data-plasmic-override={overrides.paragraph3}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.paragraph3
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $ctx.fetchedData.records[0].fields.paragraph3;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Enter some text";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <PlasmicLink__
        className={classNames(projectcss.all, projectcss.a, sty.link__dfbNq)}
        component={Link}
        href={(() => {
          try {
            return $ctx.fetchDyanamicData.records[0].fields["Step 2 URL"];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
      >
        <PlasmicImg__
          data-plasmic-name={"image3"}
          data-plasmic-override={overrides.image3}
          alt={""}
          className={classNames(sty.image3)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "auto" : "auto"
          }
          displayMaxHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "400px"
              : "400px"
          }
          displayMaxWidth={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "100%" : "100%"
          }
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "354px"
              : "750px"
          }
          loading={"lazy"}
          src={(() => {
            try {
              return $ctx.fetchedData.records[0].fields.image3[0].url;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </PlasmicLink__>
      <div
        data-plasmic-name={"paragraph4"}
        data-plasmic-override={overrides.paragraph4}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.paragraph4
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $ctx.fetchedData.records[0].fields.paragraph4;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Enter some text";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <PlasmicLink__
        className={classNames(projectcss.all, projectcss.a, sty.link__zxn3D)}
        component={Link}
        href={(() => {
          try {
            return $ctx.fetchDyanamicData.records[0].fields["Step 2 URL"];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
      >
        <PlasmicImg__
          data-plasmic-name={"image4"}
          data-plasmic-override={overrides.image4}
          alt={""}
          className={classNames(sty.image4)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "auto" : "auto"
          }
          displayMaxHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "400px"
              : "400px"
          }
          displayMaxWidth={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "100%" : "100%"
          }
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "354px"
              : "750px"
          }
          loading={"lazy"}
          src={(() => {
            try {
              return $ctx.fetchedData.records[0].fields.image4[0].url;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </PlasmicLink__>
      <div
        data-plasmic-name={"paragraph5"}
        data-plasmic-override={overrides.paragraph5}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.paragraph5
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $ctx.fetchedData.records[0].fields.paragraph5;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Enter some text";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <PlasmicLink__
        className={classNames(projectcss.all, projectcss.a, sty.link__j5DSo)}
        component={Link}
        href={(() => {
          try {
            return $ctx.fetchDyanamicData.records[0].fields["Step 2 URL"];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
      >
        <PlasmicImg__
          data-plasmic-name={"image5"}
          data-plasmic-override={overrides.image5}
          alt={""}
          className={classNames(sty.image5)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "auto" : "auto"
          }
          displayMaxHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "400px"
              : "400px"
          }
          displayMaxWidth={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "100%" : "100%"
          }
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "354px"
              : "750px"
          }
          loading={"lazy"}
          src={(() => {
            try {
              return $ctx.fetchedData.records[0].fields.image5[0].url;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </PlasmicLink__>
      <div
        data-plasmic-name={"paragraph6"}
        data-plasmic-override={overrides.paragraph6}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.paragraph6
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $ctx.fetchedData.records[0].fields.paragraph6;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Enter some text";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <PlasmicHead
        data-plasmic-name={"pageMetadataOverride"}
        data-plasmic-override={overrides.pageMetadataOverride}
        className={classNames("__wab_instance", sty.pageMetadataOverride)}
      />

      <PlasmicLink__
        className={classNames(projectcss.all, projectcss.a, sty.link__jlwn1)}
        component={Link}
        href={(() => {
          try {
            return $ctx.fetchDyanamicData.records[0].fields["Step 2 URL"];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
      >
        <PlasmicImg__
          data-plasmic-name={"image6"}
          data-plasmic-override={overrides.image6}
          alt={""}
          className={classNames(sty.image6)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "auto" : "auto"
          }
          displayMaxHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "400px"
              : "400px"
          }
          displayMaxWidth={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "100%" : "100%"
          }
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "354px"
              : "750px"
          }
          loading={"lazy"}
          src={(() => {
            try {
              return $ctx.fetchedData.records[0].fields.image6[0].url;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </PlasmicLink__>
      <div
        data-plasmic-name={"paragraph7"}
        data-plasmic-override={overrides.paragraph7}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.paragraph7
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $ctx.fetchedData.records[0].fields.paragraph7;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Enter some text";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___0L1I4
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $ctx.fetchedData.records[0].fields.aOutroH1;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Enter some text";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__u8Y9V
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $ctx.fetchedData.records[0].fields.aOutroH2;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Enter some text";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column__sKx1C)}>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__iaTmp
              )}
              component={Link}
              href={(() => {
                try {
                  return $ctx.fetchDyanamicData.records[0].fields["Step 2 URL"];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchDyanamicData.records[0].fields.aCTA;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "CLAIM FREE PODS 👉";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </PlasmicLink__>
          </div>
          <div className={classNames(projectcss.all, sty.column__hcMvI)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__f2V0L)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "70%"
                  : "80%"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "8px"
                  : "8px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/legacy_feed_page_designs/images/_4F0Afe7D15505Bfe240E785E7Ac88B6Cwebp.webp",
                fullWidth: 3,
                fullHeight: 90,
                aspectRatio: undefined
              }}
            />
          </div>
          <div className={classNames(projectcss.all, sty.column__r8Z9S)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ormDz
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchedData.records[0].fields.aOutroH3;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Enter some text";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__jDnxe)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/legacy_feed_page_designs/images/starpng.png",
                fullWidth: 142,
                fullHeight: 21,
                aspectRatio: undefined
              }}
            />
          </div>
        </div>
      </div>
      <PlasmicLink__
        className={classNames(projectcss.all, projectcss.a, sty.link__yn9DK)}
        component={Link}
        href={(() => {
          try {
            return $ctx.fetchDyanamicData.records[0].fields["Step 2 URL"];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
      >
        <PlasmicImg__
          data-plasmic-name={"image7"}
          data-plasmic-override={overrides.image7}
          alt={""}
          className={classNames(sty.image7)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "auto" : "auto"
          }
          displayMaxHeight={"400px"}
          displayMaxWidth={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "100%" : "100%"
          }
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "354px"
              : "750px"
          }
          loading={"lazy"}
          src={(() => {
            try {
              return $ctx.fetchedData.records[0].fields.image7[0].url;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </PlasmicLink__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  article1Body: [
    "article1Body",
    "heroHeadline",
    "heroSubHeadline",
    "heroImage",
    "paragraph1",
    "image1",
    "paragraph2",
    "image2",
    "paragraph3",
    "image3",
    "paragraph4",
    "image4",
    "paragraph5",
    "image5",
    "paragraph6",
    "pageMetadataOverride",
    "image6",
    "paragraph7",
    "freeBox",
    "columns",
    "image7"
  ],
  heroHeadline: ["heroHeadline"],
  heroSubHeadline: ["heroSubHeadline"],
  heroImage: ["heroImage"],
  paragraph1: ["paragraph1"],
  image1: ["image1"],
  paragraph2: ["paragraph2"],
  image2: ["image2"],
  paragraph3: ["paragraph3"],
  image3: ["image3"],
  paragraph4: ["paragraph4"],
  image4: ["image4"],
  paragraph5: ["paragraph5"],
  image5: ["image5"],
  paragraph6: ["paragraph6"],
  pageMetadataOverride: ["pageMetadataOverride"],
  image6: ["image6"],
  paragraph7: ["paragraph7"],
  freeBox: ["freeBox", "columns"],
  columns: ["columns"],
  image7: ["image7"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  article1Body: "div";
  heroHeadline: "div";
  heroSubHeadline: "div";
  heroImage: typeof PlasmicImg__;
  paragraph1: "div";
  image1: typeof PlasmicImg__;
  paragraph2: "div";
  image2: typeof PlasmicImg__;
  paragraph3: "div";
  image3: typeof PlasmicImg__;
  paragraph4: "div";
  image4: typeof PlasmicImg__;
  paragraph5: "div";
  image5: typeof PlasmicImg__;
  paragraph6: "div";
  pageMetadataOverride: typeof PlasmicHead;
  image6: typeof PlasmicImg__;
  paragraph7: "div";
  freeBox: "div";
  columns: "div";
  image7: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBodyArticle2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBodyArticle2__VariantsArgs;
    args?: PlasmicBodyArticle2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBodyArticle2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBodyArticle2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBodyArticle2__ArgProps,
          internalVariantPropNames: PlasmicBodyArticle2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBodyArticle2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "article1Body") {
    func.displayName = "PlasmicBodyArticle2";
  } else {
    func.displayName = `PlasmicBodyArticle2.${nodeName}`;
  }
  return func;
}

export const PlasmicBodyArticle2 = Object.assign(
  // Top-level PlasmicBodyArticle2 renders the root element
  makeNodeComponent("article1Body"),
  {
    // Helper components rendering sub-elements
    heroHeadline: makeNodeComponent("heroHeadline"),
    heroSubHeadline: makeNodeComponent("heroSubHeadline"),
    heroImage: makeNodeComponent("heroImage"),
    paragraph1: makeNodeComponent("paragraph1"),
    image1: makeNodeComponent("image1"),
    paragraph2: makeNodeComponent("paragraph2"),
    image2: makeNodeComponent("image2"),
    paragraph3: makeNodeComponent("paragraph3"),
    image3: makeNodeComponent("image3"),
    paragraph4: makeNodeComponent("paragraph4"),
    image4: makeNodeComponent("image4"),
    paragraph5: makeNodeComponent("paragraph5"),
    image5: makeNodeComponent("image5"),
    paragraph6: makeNodeComponent("paragraph6"),
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    image6: makeNodeComponent("image6"),
    paragraph7: makeNodeComponent("paragraph7"),
    freeBox: makeNodeComponent("freeBox"),
    columns: makeNodeComponent("columns"),
    image7: makeNodeComponent("image7"),

    // Metadata about props expected for PlasmicBodyArticle2
    internalVariantProps: PlasmicBodyArticle2__VariantProps,
    internalArgProps: PlasmicBodyArticle2__ArgProps
  }
);

export default PlasmicBodyArticle2;
/* prettier-ignore-end */
